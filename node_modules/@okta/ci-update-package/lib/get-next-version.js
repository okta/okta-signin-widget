// get-next-version
//
// Gets the next version depending on the branch name:
// - master:  beta prerelease version
// - topic:   alpha prerelease version
// - release: next minor release version
//
// If prerelease, prevents collisions by fetching the current published
// versions:
// 1. Fetches current published versions
// 2. Finds latest published version in current prerelease line
// 3. Increments to next minor prerelease version according to semver rules
//
// Example master branch commit with package.json version of 1.1.0 and no
// previous beta versions:
// > 1.2.0-beta.0
//
// If that version is published, the next time you run yields:
// > 1.2.0-beta.1
//
// More info in how we version NPM modules:
// https://oktawiki.atlassian.net/wiki/x/sIDABQ
//
/* global module */
var semver  = require('semver'),
    exec    = require('child_process').execSync,
    _       = require('lodash'),
    logger  = require('winston');

function getVersions(pkgName) {
  var cmd = 'npm view ' + pkgName + ' versions --json',
      result;
  try {
    result = exec(cmd, { encoding: 'utf8' });
  } catch (err) {
    if (err.stderr && err.stderr.indexOf('404 Not Found') > -1) {
      logger.log('info', 'No previous versions published');
      return [];
    }
    throw err;
  }
  logger.log('info', 'getVersions:', {
    cmd: cmd,
    result: result
  });
  return JSON.parse(result);
}

function getPrereleaseLine(pkgVersion, prereleaseTag) {
  var version = semver.inc(pkgVersion, 'preminor', prereleaseTag),
      line = version.substring(0, version.lastIndexOf('.'));
  logger.log('info', 'getPrereleaseLine:', {
    pkgVersion: pkgVersion,
    nextPrereleaseVersion: version,
    line: line
  });
  return line;
}

function getLastVersionInLine(publishedVersions, prereleaseLine) {
  var last = _.reduce(publishedVersions, function (memo, val) {
    if (val.indexOf(prereleaseLine) === -1) {
      return memo;
    }
    if (!memo) {
      return val;
    }
    return semver.lt(memo, val) ? val : memo;
  }, null);
  logger.log('info', 'getLastVersionInLine:', {
    prereleaseLine: prereleaseLine,
    version: last
  });
  return last;
}

function getNextPrereleaseVersion(pkgName, pkgVersion, prereleaseTag) {
  var lastVersionInLine, nextVersion;

  lastVersionInLine = getLastVersionInLine(
    getVersions(pkgName),
    getPrereleaseLine(pkgVersion, prereleaseTag)
  );

  if (lastVersionInLine) {
    nextVersion = semver.inc(lastVersionInLine, 'prerelease', prereleaseTag);
  }
  else {
    nextVersion = semver.inc(pkgVersion, 'preminor', prereleaseTag);
  }

  logger.log('info', 'getNextPrereleaseVersion:', {
    lastVersionInLine: lastVersionInLine,
    nextVersion: nextVersion
  });

  return nextVersion;
}

function getNextReleaseVersion(pkgVersion) {
  var releaseVersion = semver.inc(pkgVersion, 'minor');
  logger.log('info', 'getNextReleaseVersion:', {
    currentVersion: pkgVersion,
    releaseVersion: releaseVersion
  });
  return releaseVersion;
}

function getNextVersion(pkgName, pkgVersion, branch) {
  var nextVersion;

  switch (branch) {
  case 'release':
    nextVersion = getNextReleaseVersion(pkgVersion);
    break;
  case 'master':
    nextVersion = getNextPrereleaseVersion(pkgName, pkgVersion, 'beta');
    break;
  default:
    nextVersion = getNextPrereleaseVersion(pkgName, pkgVersion, 'alpha');
    break;
  }

  logger.log('info', 'getNextVersion:', {
    pkgName: pkgName,
    pkgVersion: pkgVersion,
    branch: branch,
    nextVersion: nextVersion
  });

  return nextVersion;
}

module.exports = getNextVersion;
