#############################################################################################
#############################################################################################
##
##  DO NOT MANUALLY MODIFY - THIS IS AN AUTOMATICALLY GENERATED FILE.
##  REFER TO https://github.com/okta/npm/tree/master/i18n FOR MORE DETAILS
##
##  @okta/i18n, https://github.com/okta/npm/tree/master/i18n, 05/16/2016
##
#############################################################################################
#############################################################################################


# Job status messages

# Job statuses
jobStatus.CREATED       = Created
jobStatus.FAILED        = Failed
jobStatus.COMPLETED     = Completed
jobStatus.IN_PROGRESS   = In Progress
jobStatus.CANCELLED     = Cancelled
jobStatus.EXPIRED       = Timed Out
jobStatus.NOT_FOUND     = Not Found

# Status messages for job states
jobStatus.message.CREATED       = Scheduled on ${ssfn:formatTimestamp(scheduledTime)} UTC
jobStatus.message.FAILED        = Failed on ${ssfn:formatTimestamp(completionTime)} UTC: ${statusText}
jobStatus.message.COMPLETED     = Completed on ${ssfn:formatTimestamp(completionTime)} UTC
jobStatus.message.IN_PROGRESS   = In progress, started on ${ssfn:formatTimestamp(startTime)} UTC: ${statusText}
jobStatus.message.CANCELLED     = Cancelled on ${ssfn:formatTimestamp(completionTime)} UTC
jobStatus.message.EXPIRED       = Expired on ${ssfn:formatTimestamp(expiration)} UTC
jobStatus.message.NOT_FOUND     = Not found
jobStatus.message.QUEUED        = Scheduled on ${ssfn:formatTimestamp(scheduledTime)} UTC
jobStatus.message.WAITING_FOR_CHILDREN = Waiting for children, scheduled on ${ssfn:formatTimestamp(scheduledTime)} UTC

# Job status messages
jobs.Job.statusMessage          = ${jobState.currentStateMessage}

# Provisioning job status messages
app.provisioning            = ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: Provisioning ${targetAppUser.userName} in progress...
app.provisioning.FAILED     = ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: Error provisioning ${targetAppUser.userName} (${jobState.statusText})
app.provisioning.COMPLETED  = ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: Successfully provisioned ${targetAppUser.userName}!

app.verifying.user          = ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: Verifying ${targetAppUser.userName}...
app.verifying.user.FAILED   = ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: Error verifying ${targetAppUser.userName} (${jobState.statusText})
app.verifying.user.COMPLETED= ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: Successfully verified ${targetAppUser.userName}!

# Profile sync status messages
app.sync=Updating ${targetAppUser.userName} on ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance} in progress
app.sync.FAILED=Failed to update ${targetAppUser.userName} on ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: ${ssfn:i18n(jobState.statusText)}
app.sync.COMPLETED=Successfully updated ${targetAppUser.userName} on ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}

# Bulk assignment messages
app.bulk_assign             = Assigning ${fn:length(instanceIds)} applications to ${fn:length(userIds)} users \
  (started at ${ssfn:formatTimestamp(jobState.scheduledTime)} UTC)
app.bulk_assign.COMPLETED   = ${fn:length(instanceIds)} applications successfully assigned to ${fn:length(userIds)} users!
app.bulk_assign.FAILED      = Could not assign one or more applications

# Dir Sync messages
dir.sync=Syncing Active Directory on ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance} in progress
dir.sync.FAILED=Failed to sync Active Directory on ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}: ${ssfn:i18n(jobState.statusText)}
dir.sync.COMPLETED=Successfully synced Active Directory on ${targetAppUser.instance.app.displayName} - ${targetAppUser.instance.applicationInstance}

# App download status messages

app.download=Downloading application information for \
  ${app.displayName} - \
  ${applicationInstance} \
  in progress

app.download.FAILED=Failed to download application information from \
  ${app.displayName} - \
  ${applicationInstance}.  \
  Please verify application configuration and retry operation.

app.download.COMPLETED=Okta successfully downloaded application \
  information for ${app.displayName} - \
  ${applicationInstance}.
  
# User import status messages
app.importUsers=Importing users for ${applicationInstance} in progress
app.importUsers.FAILED=User import for ${applicationInstance} failed.  Please verify application configuration and retry operation.
app.importUsers.COMPLETED=Okta successfully imported users for ${applicationInstance}.

# Bulk user import status messages
bulkImportUsers=Bulk user import in progress
bulkImportUsers.FAILED=Bulk user import failed. Please verify application configuration and retry operation.
bulkImportUsers.COMPLETED=Okta successfully imported users.

#Schema import status messages
app.importSchema=Importing schema for ${applicationInstance} in progress
app.importSchema.FAILED=Schema import for ${applicationInstance} failed. Please verify application configuration and retry operation.
app.importSchema.COMPLETED=Okta successfully imported schema for ${applicationInstance}.

# Office 365 license migration messages
o365LicenseMigration=Office 365 licenses migration for organization ${org} in progress
o365LicenseMigration.FAILED=Office 365 licenses migration for organization ${org} failed. Please verify that application users have the correct licenses assigned.
o365LicenseMigration.COMPLETED=Okta successfully migrated the Office 365 licenses for organization ${org}.

# UD profile migration messages
cvd.migrateProfile=Migrating UD profile for ${applicationInstance} in progress
cvd.migrateProfile.FAILED=UD profile migration for ${applicationInstance} failed.  Please verify application configuration and retry operation.
cvd.migrateProfile.COMPLETED=Okta successfully migrated the UD profile for ${applicationInstance}.

# Rescheduled job messages
job.activate_appuser.reschedule.rateLimit = Rescheduling activate user job for {0} ({1}) to {2} ({3}) - rate limit for API exceeded.
job.provision.reschedule = Rescheduling provision user job for {0} ({1}) to {2} ({3}) - found active deprovision job.
job.provision.reschedule.rateLimit = Rescheduling provision user job for {0} ({1}) to {2} ({3}) - rate limit for API exceeded.
job.grouppush.reschedule.rateLimit = Rescheduling group push job for group {0} - rate limit for API exceeded.
job.deprovision.reschedule.rateLimit = Rescheduling deprovision user job for {0} ({1}) from {2} ({3}) - rate limit for API exceeded.
job.profile_sync.reschedule.rateLimit = Rescheduling profile sync job for {0} ({1}) at {2} ({3}) - rate limit for API exceeded.
job.user_import.reschedule.rateLimit = Rescheduling user import job for app {0} ({1}) - rate limit for API exceeded.
job.bulk_user_import.reschedule.rateLimit = Rescheduling bulk user import job - rate limit for API exceeded.
job.provisioning_data_import.reschedule.rateLimit = Rescheduling provisioning data import job for app {0} ({1}) - rate limit for API exceeded.
job.password_sync.reschedule.rateLimit = Rescheduling password sync job for {0} ({1}) from {2} ({3}) - rate limit for API exceeded.
job.reconcileadtokegroup.reschedule.rateLimit = Rescheduling reconcile ADTokenGroup job for appGroupExternalId {0} - rate limit for API exceeded.

# Test status
test.job.reschedule             = Rescheduled: Count={0},Name={1}
jobs.ExampleJob.statusMessage   = <b>Job ${index} [${id}]</b>: ${jobState.currentStateMessage}
jobs.TestJob.message            = ${name} : command ${command}
jobs.TestJob.message.FAILED     = ${name} failed: ${jobState.statusText}
