{
  "_args": [
    [
      "@okta/i18n@https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/i18n/-/@okta/i18n-1.11.0.tgz",
      "/Users/ujjwalreddy/okta/okta-signin-widget"
    ]
  ],
  "_from": "@okta/i18n@1.11.0",
  "_id": "@okta/i18n@1.11.0",
  "_inCache": true,
  "_location": "/@okta/i18n",
  "_phantomChildren": {},
  "_requested": {
    "name": "@okta/i18n",
    "raw": "@okta/i18n@https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/i18n/-/@okta/i18n-1.11.0.tgz",
    "rawSpec": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/i18n/-/@okta/i18n-1.11.0.tgz",
    "scope": "@okta",
    "spec": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/i18n/-/@okta/i18n-1.11.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/i18n/-/@okta/i18n-1.11.0.tgz",
  "_shasum": "9521ecb9104e6a0706f1cc2824a47bc85f47ba60",
  "_shrinkwrap": null,
  "_spec": "@okta/i18n@https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/i18n/-/@okta/i18n-1.11.0.tgz",
  "_where": "/Users/ujjwalreddy/okta/okta-signin-widget",
  "dependencies": {},
  "description": "Okta Localization",
  "devDependencies": {
    "@okta/ci-pkginfo": "^1.1.0",
    "@okta/ci-update-package": "^1.1.0",
    "chai": "^3.5.0",
    "csv-stringify": "^1.0.2",
    "deep-diff": "^0.3.3",
    "grunt": "^1.0.1",
    "grunt-banner": "^0.6.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-eslint": "^18.1.0",
    "grunt-properties-to-json": "0.6.0",
    "grunt-shell": "^1.3.0",
    "istanbul": "^0.4.3",
    "lodash": "^4.11.0",
    "mocha": "^2.4.5",
    "mocha-junit-reporter": "^1.11.1",
    "properties": "^1.2.1",
    "q": "^1.4.1",
    "semver": "^5.1.0"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/okta/npm/tree/master/i18n",
  "license": "Apache-2.0",
  "name": "@okta/i18n",
  "okta": {
    "commitSha": "40c6ea0c1441407b45326978716a8cee350705b7",
    "fullVersion": "1.11.0-20160606174200-40c6ea0",
    "testedSha": "e4243d14d9f26ebe248f661ff668b17bece66a38"
  },
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta"
  },
  "readme": "I18N\n=======\n\nThe **i18n** module is the common place to store all Okta localization strings.\n\nLocalization strings are stored in *.properties* files in the [properties/](https://github.com/okta/npm/tree/master/i18n/properties) folder, and [published to the following formats](#distributed-files):\n- [Properties](https://en.wikipedia.org/wiki/.properties)\n- [RequireJs i18n bundle](http://requirejs.org/docs/api.html#i18n)\n- [JSON](http://www.json.org/)\n\n## Developer workflow\n\n1. [Initial setup](#setup)\n2. [Link your changes for local development](#link-your-changes-to-the-monolith)\n3. [Update](#updating-existing-properties-files), or [create new properties files](#creating-a-new-properties-file)\n  - [Update major version if making a breaking change (like deleting properties)](#breaking-changes)\n4. [Merge through bacon](#bacon)\n5. [Update i18n version in downstream projects](#update-i18n-version-in-downstream-projects)\n\n## Translation workflow\n\n1. [Initial setup](#setup)\n2. [Generate diff](#generating-diffs)\n  - [If new language, generate diff-all file](#adding-a-new-language)\n3. [Send diff files to translation vendor](#send-diff-files-to-translation-vendor)\n4. [Import translated diff files](#importing-diffs)\n5. [Merge through bacon](#bacon)\n6. [Update i18n version in downstream projects](#update-i18n-version-in-downstream-projects)\n\n## Commands\n\n| Command              | Description\n| -------------------- | -----------\n| **npm run link**     | Links i18n to okta-core for easier development\n| **npm run diff**     | Generates diff file with all changes across tracked files [more](#generating-diffs)\n| **npm run diff-all** | Generates diff file for new language [more](#adding-a-new-language)\n| **npm run import**   | Imports translated diff file [more](#importing-diffs)<br />Requires **--file=/path/to/diff-{sha}_{languageCode}.properties**\n| **npm test**         | Runs unit tests\n| **npm run lint**     | Runs lint\n\n## Topics\n\n### General\n\n<a id=\"setup\"></a>\n#### Setup\n\n```bash\n# 1. Clone the `npm` repo if you don't have it, and navigate to i18n\n[okta]$ git clone git@github.com:okta/npm.git && cd npm/i18n\n\n# 2. Install dependencies\n[npm/i18n]$ npm install\n```\n\n<a id=\"distributed-files\"></a>\n#### Distributed files\n\nThe published **i18n** module contains a *dist/* folder with the exported formats:\n\n```bash\nnode_modules/@okta/i18n/\n  dist/\n    json/\n      enduser_ja.json\n      enduser.json\n      ...\n    properties/\n      enduser_ja.properties\n      enduser.properties\n      ...\n    requirejs/\n      ja/\n        enduser.js\n        ...\n      enduser.js\n      ...\n```\n\n<a id=\"bacon\"></a>\n#### Bacon\n\nTo commit, get the :rocket: and merge through the [i18n bacon board](http://bacon.trex.saasure.com/#!/commits/i18n).\n\n<a id=\"update-i18n-version-in-downstream-projects\"></a>\n#### Update i18n version in downstream projects\n\n1. Wait for the master branch to finish all bacon test suites\n\n    When your topic branch is merged, a new bacon run is kicked off against the master branch. The master *publish* test suite will publish a beta prerelease version with your commit to the [internal npm registry](https://oktawiki.atlassian.net/wiki/display/eng/Using+the+Okta+internal+NPM+registry).\n\n2. Promote the master branch artifact.\n\n    In bacon, click the [hamburger button](https://en.wikipedia.org/wiki/Hamburger_button) that's next to the merge button in the **master** run that was kicked off after merging your topic branch. Then choose **Promote artifact**. If you do not have the **Promote artifact** link, talk to eng-prod.\n\n3. Visit the [artifact promotion](http://bacon.trex.saasure.com/#!/reports/artifact_promotion/all) page and wait for the status of your i18n artifact to be **PROMOTED**.\n\n4. If you've made a non-breaking change, you're done! It will automatically be included the next time you run an `npm install` in the various okta-core modules.\n\n5. If your change is breaking and you had to increment the i18n [major version](http://semver.org/), you'll need to update okta-core with your changes:\n\n    - Find the release i18n version that you just promoted\n\n        ```bash\n        # The last release version will be the one you want, i.e. 2.0.0\n        $ npm view @okta/i18n versions\n        ```\n\n    - Update version in all affected downstream modules. In okta-core, use the [install-with-shrinkwrap](https://github.com/okta/npm/tree/master/install-with-shrinkwrap#install-with-shrinkwrap) package to generate the right *npm-shrinkwrap.json* file in both *clients/admin* and the root *okta-core* folder:\n\n        ```bash\n        # OKTA-CORE\n\n        # If you need to consume your changes in java land, update the root package\n        [okta-core]$ npm run installsw @okta/i18n@2.0.0\n\n        # If you need to consume your changes in client side javascript, update\n        # clients/admin\n        [okta-core/clients/admin]$ npm run installsw @okta/i18n@2.0.0\n\n        # OTHER REPOS THAT DO NOT USE INSTALL-WITH-SHRINKWRAP\n\n        # If you're updating a module that is not using install-with-shrinkwrap:\n        [your-module]$ npm install -E @okta/i18n@2.0.0 --save\n        ```\n\n### Developer\n\n<a id=\"link-your-changes-to-the-monolith\"></a>\n#### Link your changes to the monolith\n\n> We are currently working on a more general approach that applies to any project\n\nIf you're working in [okta-core](https://github.com/okta/okta-core), we've written a command for easier development:\n\n```bash\n# Link i18n changes to okta-core\n[i18n]$ npm run link\n```\n\nThis sets up a [watch task](https://www.npmjs.com/package/grunt-contrib-watch) that triggers when changes are made to *.properties*:\n\n1. Packages the [exported formats](#distributed-files)\n2. Copies to original paths in okta-core\n\nOnce you've set up the link, your previous okta-core workflow will be the same - after the files have been copied by the watch task:\n```bash\n# Javascript\n[okta-core]$ ant deploy.modified.ui.i18n\n\n# Java (controller or jsp that consumes resources/i18n/*.properties)\n[okta-core]$ ant smoke.tomcat deploy.modified.code start.tomcat.debug.async\n```\n\n**Note:** You must exit the link with **ctrl+c**.\n\n<a id=\"updating-existing-properties-files\"></a>\n#### Updating existing .properties files\n\nLocalization strings are stored in *.properties* files in the [properties/](https://github.com/okta/npm/tree/master/i18n/properties) folder.\n\nTwo things to keep in mind when updating *.properties* files:\n- Only modify the english source files. Language files are automatically generated from the [import process](#importing-diffs).\n- Do not manually modify the *Last translated sha* line at the top of the source english files.\n\n<a id=\"creating-a-new-properties-file\"></a>\n#### Creating a new .properties file\n\nAdd the new file to the *properties/* folder. It will automatically be exported to the [exported formats](#distributed-files) on the next publish.\n\nIf you want to add this file to the list of files to be translated, [read this](#adding-a-new-properties-file-for-translation).\n\n<a id=\"breaking-changes\"></a>\n#### Breaking changes\n\nSome downstream repos (like okta-core) will automatically pull in any non-breaking changes to release versions of the i18n module. Because of this, it is important to increment the i18n major version number whenever making any breaking changes - specifically, when you delete properties.\n\nTo update the major version number:\n\n```bash\n# Bumps package.json version number to next major version\n[npm/i18n]$ npm version major\n```\n\n### Translations\n\n<a id=\"generating-diffs\"></a>\n#### Generating diffs\n\n> This is automated as part of the code-freeze process. At code-freeze, the diff is added to the weekly release notes, and an email is sent to the localization team.\n\n```bash\n# Generate diff-{current_sha}.properties file\n[i18n]$ npm run diff\n```\n\nThis command will generate a single *diff-{current_sha}.properties* file that contains all changes that have been made to the [tracked .properties files](#adding-a-new-properties-file-for-translation) since the last translation.\n\nThis file is sent to the translation vendor, and is composed of four sections:\n\n1. **Translate** - new properties that need to be translated.\n2. **Copy** - properties that have been renamed or duplicated across *.properties* files\n3. **Delete** - properties that have been deleted\n4. **Metadata** - additional metadata like the sha that this diff has been generated from\n\nSections 2-4 are commented out. This signals to the translators that they can ignore these sections when translating the file. The translator returns the file with the **Translate** section converted to the target language, where it can then be [imported](#importing-diffs).\n\n<a id=\"adding-a-new-language\"></a>\n#### Adding a new language\n\nAdding a new language is similar to the regular diff flow, except that the generated diff file includes **all** properties across **all** [tracked *.properties* files](#adding-a-new-properties-file-for-translation).\n\nThis must be done manually when we've decided to add a new language:\n\n1. Checkout the sha that was used to generate the regular diff.\n\n    > It is important to use the same sha because of how we internally track when to apply the diff.\n\n2. Generate the *diffall-{current_sha}.properties* file\n\n    ```bash\n    # Generates a diffall-{current_sha}.properties file with all properties\n    [i18n]$ npm run diff-all\n    ```\n\n<a id=\"adding-a-new-properties-file-for-translation\"></a>\n#### Adding a new .properties file for translation\n\n> We currently only translate enduser facing properties\n\nThe list of tracked *.properties* files is stored in the *i18ndiff* target in the *Gruntfile.js*.\n\n```javascript\n// Gruntfile.js\n'i18ndiff': {\n  propertiesFiles: [\n    'enduser',\n    'login',\n    // Add your new file here.\n    // Note: No .properties extension is needed\n    'new-properties-file'\n  ]\n}\n```\n\n<a id=\"send-diff-files-to-translation-vendor\"></a>\n#### Send diff files to translation vendor\n\nWe use [CloudWords](https://www.cloudwords.com/) to manage the translation process. For more information about this, check out the [Localization Home](https://oktawiki.atlassian.net/wiki/display/eng/Localization+Home) wiki page.\n\n<a id=\"importing-diffs\"></a>\n#### Importing diffs\n\n> The expected format for returned files is *diff-{sha}_{languageCode}.properties*\n> i.e. diff-2345957d3811d621efc1070601ff5fda8f135710_ja.properties\n\nOnce the *diff.properties* files have been returned, run the `import` command for each file to import into your current branch.\n\n```bash\n# Run this for each translated diff file\n[i18n]$ npm run import -- -file=/path/to/diff-{sha}_{language}.properties\n```\n\nSeveral things happen when this command is run:\n- All changes described in the *diff.properties* file are applied to affected files. In fact, all language *.properties* files are re-generated at this time after the operations have been applied.\n- The sha that this file was generated from is set as the *lastTranslatedSha* in the original, modified english files.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/okta/npm/tree/master/i18n"
  },
  "scripts": {
    "ci-pkginfo:dataload": "ci-pkginfo -t dataload",
    "ci-update-package": "ci-update-package",
    "diff": "grunt i18n-generate-diff",
    "diff-all": "grunt i18n-generate-diff --all",
    "import": "grunt i18n-import-diff",
    "link": "grunt link",
    "lint": "grunt lint",
    "lint:report": "grunt lint --checkstyle --force",
    "prepublish": "grunt package",
    "test": "npm run test:unit",
    "test:coverage": "exit 0;",
    "test:report": "npm run test:unit-report ; exit 0",
    "test:unit": "mocha --ui bdd --require tasks/i18ndiff/test/support/node -R spec tasks/i18ndiff/test",
    "test:unit-report": "mocha --ui bdd --require tasks/i18ndiff/test/support/node -R mocha-junit-reporter -O mochaFile=./build2/reports/unit/mocha-junit-result.xml tasks/i18ndiff/test"
  },
  "version": "1.11.0"
}
