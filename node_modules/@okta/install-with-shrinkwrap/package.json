{
  "_args": [
    [
      "@okta/install-with-shrinkwrap@https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/install-with-shrinkwrap/-/@okta/install-with-shrinkwrap-1.2.0.tgz",
      "/Users/ujjwalreddy/okta/okta-signin-widget"
    ]
  ],
  "_from": "@okta/install-with-shrinkwrap@1.2.0",
  "_id": "@okta/install-with-shrinkwrap@1.2.0",
  "_inCache": true,
  "_location": "/@okta/install-with-shrinkwrap",
  "_phantomChildren": {
    "brace-expansion": "1.1.4",
    "decamelize": "1.2.0",
    "inflight": "1.0.5",
    "inherits": "2.0.1",
    "lodash.assign": "4.0.9",
    "once": "1.3.3",
    "os-locale": "1.4.0",
    "path-is-absolute": "1.0.0",
    "pkg-conf": "1.1.3",
    "read-pkg-up": "1.0.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "1.0.0",
    "string-width": "1.0.1",
    "wrap-ansi": "2.0.0",
    "y18n": "3.2.1",
    "yargs-parser": "2.4.0"
  },
  "_requested": {
    "name": "@okta/install-with-shrinkwrap",
    "raw": "@okta/install-with-shrinkwrap@https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/install-with-shrinkwrap/-/@okta/install-with-shrinkwrap-1.2.0.tgz",
    "rawSpec": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/install-with-shrinkwrap/-/@okta/install-with-shrinkwrap-1.2.0.tgz",
    "scope": "@okta",
    "spec": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/install-with-shrinkwrap/-/@okta/install-with-shrinkwrap-1.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/install-with-shrinkwrap/-/@okta/install-with-shrinkwrap-1.2.0.tgz",
  "_shasum": "c5415555c37c33db6e0916d674c70fa1c2030975",
  "_shrinkwrap": null,
  "_spec": "@okta/install-with-shrinkwrap@https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta/@okta/install-with-shrinkwrap/-/@okta/install-with-shrinkwrap-1.2.0.tgz",
  "_where": "/Users/ujjwalreddy/okta/okta-signin-widget",
  "bin": {
    "install-with-shrinkwrap": "./bin/install-with-shrinkwrap.js"
  },
  "dependencies": {
    "jsonfile": "^2.3.0",
    "lodash": "^4.12.0",
    "rimraf": "^2.5.2",
    "winston": "^2.2.0",
    "yargs": "^4.7.0"
  },
  "description": "Install packages with consistent shrinkwrap changes",
  "devDependencies": {
    "@okta/ci-pkginfo": "^1.1.0",
    "@okta/ci-update-package": "^1.1.0",
    "chai": "^3.5.0",
    "eslint": "^2.8.0",
    "istanbul": "^0.4.3",
    "mocha": "^2.4.5",
    "mocha-junit-reporter": "^1.11.1",
    "rewire": "^2.5.1",
    "sinon": "^1.17.3"
  },
  "homepage": "https://github.com/okta/npm/tree/master/install-with-shrinkwrap",
  "install-with-shrinkwrap": {
    "expectedNPMVersion": "3.9.1",
    "expectedNodeVersion": "5.6.0"
  },
  "license": "Apache-2.0",
  "main": "lib/index",
  "name": "@okta/install-with-shrinkwrap",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://artifacts.aue1d.saasure.com/artifactory/api/npm/npm-okta"
  },
  "readme": "INSTALL-WITH-SHRINKWRAP\n=======\n\n* [Description](#description)\n* [Using install-with-shrinkwrap](#using-install-with-shrinkwrap)\n  * [Install](#install)\n  * [Usage](#usage)\n* [Developing install-with-shrinkwrap](#developing-install-with-shrinkwrap)\n  * [Setup](#setup)\n  * [Dev commands](#dev-commands)\n  * [Bacon](#bacon)\n\n<a id=\"description\"></a>\n## Description\n\nCLI tool that installs a package with minimal, deterministic changes to the shrinkwrap file.\n\n> Use this in all modules that require an *npm-shrinkwrap.json* file.\n\n1. Asserts standard Node and NPM versions for consistent shrinkwrapping\n2. Installs exact dependency version (uses `npm install -E`)\n  - When upgrading a dependency to a new version, it will figure out whether to use the `--save` or `--save-dev` flag\n3. Prunes modules that are not listed in package.json\n4. Dedupes duplicated packages\n5. Runs `npm-shrinkwrap --dev` to generate a new shrinkwrap\n6. Removes `resolved` and `from` fields, which speeds up subsequent `npm install`'s\n\n<a id=\"using-install-with-shrinkwrap\"></a>\n## Using install-with-shrinkwrap\n\n<a id=\"install\"></a>\n### Install\n\nIn your module's root app folder, run `npm install`:\n```bash\n# Install latest version\n[your-module]$ npm install @okta/install-with-shrinkwrap --save-dev\n```\n\nThen, expose these [run scripts](https://docs.npmjs.com/misc/scripts) in your *package.json*:\n\n```javascript\n// package.json\n\"scripts\": {\n  \"installsw\": \"install-with-shrinkwrap\",\n  \"lint-shrinkwrap\": \"install-with-shrinkwrap --check\",\n  \"lint-shrinkwrap:report\": \"install-with-shrinkwrap --check --force --out build2/reports/lint/shrinkwrap-checkstyle-result.xml\"\n}\n```\n\n<a id=\"usage\"></a>\n### Usage\n\n**Note:** Since these are run scripts, you must pass script arguments after the special option `--`. Read more about how to use run scripts on the [npm-run-script](https://docs.npmjs.com/cli/run-script) page.\n\n#### Installing modules with shrinkwrap\n\nThe `installsw` run script works very similarly to [`npm install`](https://docs.npmjs.com/cli/install).\n\n\n##### Upgrading a module version\n\nWhen upgrading a module that's already been installed in your *package.json*:\n\n```bash\n# Installing a module with a scope and exact version\n[your-module]$ npm run installsw -- @okta/i18n@1.1.0-beta.24\n\n# Installing a module without the version\n[your-module]$ npm run installsw -- lodash\n```\n\n##### Installing a new module\n\nWhen installing a module that's not in your *package.json*, pass a `--save` or `--save-dev` flag:\n\n```bash\n# A devDependency, i.e. something you only need to run for build/test/lint\n[your-module]$ npm run installsw -- grunt-contrib-jasmine --save-dev\n\n# A dependency, i.e. a package that you bundle with your library and is\n# needed for your module to work\n[your-module]$ npm run installsw -- jquery --save\n```\n\n#### Verifying that the shrinkwrap file is correct\n\nThe `lint-shrinkwrap:report` run script is useful for validating the shrinkwrap in CI - it will generate a checkstyle file that can be consumed by Aperture. Execute this command when running your lint testSuite:\n\n```bash\n[your-module]$ npm run lint-shrinkwrap:report\n```\n\nIf you want to test this behavior in your dev environment without writing to a checkstyle file, you can run:\n\n```bash\n[your-module]$ npm run lint-shrinkwrap\n```\n\n#### Getting help\n\nUse the `--help` option to see a list of available commands:\n\n```bash\n[your-module]$ npm run installsw -- --help\n```\n\n\n\n<a id=\"developing-install-with-shrinkwrap\"></a>\n## Developing install-with-shrinkwrap\n\n<a id=\"setup\"></a>\n### Setup\n\n```bash\n# 1. Clone the `npm` repo if you don't have it, and navigate to install-with-shrinkwrap\n[okta]$ git clone git@github.com:okta/npm.git && cd npm/install-with-shrinkwrap\n\n# 2. Install dependencies\n[npm/i18n]$ npm install\n```\n\n<a id=\"dev-commands\"></a>\n### Dev commands\n\n| Command      | Description\n| ------------ | -----------\n| **npm test**     | Run unit tests and code coverage\n| **npm run lint** | Run the linter\n\n<a id=\"bacon\"></a>\n### Bacon\n\nTo commit, get the :rocket: and merge through the [install-with-shrinkwrap bacon board](http://bacon.trex.saasure.com/#!/commits/install-with-shrinkwrap).\n",
  "readmeFilename": "README.md",
  "scripts": {
    "ci-pkginfo:dataload": "ci-pkginfo -t dataload",
    "ci-update-package": "ci-update-package",
    "lint": "eslint .",
    "lint:report": "eslint -f checkstyle -o build2/reports/lint/eslint-checkstyle-result.xml .",
    "test": "npm run test:unit && npm run test:coverage",
    "test:coverage": "istanbul check-coverage --statements 100 --branches 100 --functions 100 --lines 100",
    "test:report": "(npm run test:unit-report || true) && npm run test:coverage",
    "test:unit": "istanbul cover _mocha",
    "test:unit-report": "istanbul cover _mocha -- -R mocha-junit-reporter -O mochaFile=./build2/reports/unit/mocha-junit-result.xml"
  },
  "version": "1.2.0"
}
