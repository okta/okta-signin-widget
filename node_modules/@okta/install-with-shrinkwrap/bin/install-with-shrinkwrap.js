#!/usr/bin/env node

var path      = require('path'),
    yargs     = require('yargs'),
    _         = require('lodash'),
    assertEnv = require('../lib/assert-env'),
    index     = require('../lib/index'),
    check     = require('../lib/check'),
    srcDir    = path.normalize(path.join(__dirname, '..')),
    srcPkg    = require(path.join(srcDir, 'package.json')),
    targetDir = process.cwd(),
    targetPkg = require(path.join(targetDir, 'package.json')),
    config    = srcPkg['install-with-shrinkwrap'];


var usageTpl = _.template(
  'Usage: $0 [options] [<@scope>]<name>[@<version range>]\n' +
  'Installs package with minimal, deterministic changes to the shrinkwrap file:\n\n' +
  '1. Verifies target Node and NPM versions for consistent shrinkwrapping\n' +
  '  - Node: <%= expectedNodeVersion %>\n' +
  '  - NPM:  <%= expectedNPMVersion %>\n' +
  '2. Installs exact dependency (npm install -E)\n' +
  '  - If upgrading dependency, uses previous save location (dev or dep)\n' +
  '3. Prunes modules that are not listed in package.json\n' +
  '4. Dedupes duplicated packages\n' +
  '5. Runs npm-shrinkwrap --dev to generate a new shrinkwrap\n' +
  '6. Removes resolved and from fields\n'
);

var argv = yargs
  .usage(usageTpl(config))
  .alias({
    'version': ['v'],
    'help': ['h']
  })
  .version()
  .help()
  .wrap(yargs.terminalWidth())
  .options({
    'save': {
      alias: 'S',
      describe: 'Saves to dependencies. Only necessary on fresh install',
      boolean: true,
      default: false
    },
    'save-dev': {
      alias: 'D',
      describe: 'Saves to devDependencies. Only necessary on fresh install',
      boolean: true,
      default: false
    },
    'check': {
      alias: 'c',
      describe: 'Verifies that current shrinkwrap has been generated correctly',
      boolean: true,
      default: false
    },
    'out': {
      alias: 'o',
      describe: 'Writes to given checkstyle file if --check is also present',
      type: 'string'
    },
    'force': {
      alias: 'f',
      describe: 'Does not return an error code when --check is true',
      boolean: true,
      default: false
    }
  })
  .example(
    '$0 @okta/courage@1.1.0-beta.10',
    'Upgrade exact courage version with @okta scope'
  )
  .example(
    '$0 eslint --save-dev',
    'Install latest eslint package and save as a package.json devDependency'
  )
  .example(
    '$0 colors --save',
    'Install latest colors package and save as a package.json dependency'
  )
  .example(
    '$0 --check --force --out /some/checkstyle.xml',
    'Validates that current shrinkwrap has been generated correctly'
  )
  .check(function (parsed) {
    if (parsed.save && parsed.saveDev) {
      throw new Error('ERR! Cannot --save-dev and --save at the same time');
    }
    if (parsed._.length === 0 && !parsed.check) {
      throw new Error('ERR! Enter a package name [@scope>]<name>[@<version range]');
    }
    return true;
  })
  .argv;

if (argv.check) {
  check(targetDir, argv.out, argv.force);
}
else {
  assertEnv(config);
  index({
    srcDir: srcDir,
    targetDir: targetDir,
    targetPkg: targetPkg,
    packageToInstall: argv._[0],
    save: argv.save,
    saveDev: argv.saveDev
  });
}
