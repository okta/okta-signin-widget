/**
 * COPY FROM: /js/common/jobs.js
 * CREATED AT: Sep 14 16:10:51 PDT 2015
 *
 * 1. Fixed jshint errors.(naming convension, styles)
 * 2. explicitly set "traditional:true"
 *    because it's false after jquery 1.8 and job API didn't support new way to de-serialize array.
 * 3. clean up DOM related pieces.
 * 4. to be secureJSON data type.
 */

define([
  'jquery',
  'underscore'
], function ($, _) {
  /* eslint max-statements: 0, complexity: 0, max-depth: 0 */

  var POLL_RATE = 2000,
      DEFAULT_JOB_URL = '/job/status',
      DEFAULT_JOB_GROUP_URL = '/joblist/status',
      DEFAULT_OPTIONS = { onSuccess: _.noop,
                          onFailure: _.noop,
                          onProgress: _.noop
                        },
      jobsToPoll = [],
      inProgress = 0;

  function startJob(job) {
    jobsToPoll[job.jobId] = job;
    jobsToPoll[jobsToPoll.length] = job.jobId;
    if (inProgress === 0) {
      inProgress = 1;
      pollJob();
    }
  }

  function invokeCallbacks(job, jobBean) {

    var stopPollingJob = true;
    var jobStatus = jobBean.status;

    if (jobStatus == 'COMPLETED') {
      job.options.onSuccess(jobBean);
    } else if (jobStatus == 'FAILED' || jobStatus == 'EXPIRED') {
      job.options.onFailure(jobBean);
    } else if (jobStatus == 'CANCELLED') {
      job.options.onFailure(jobBean);
    } else {
      job.options.onProgress(jobBean);
      stopPollingJob = false;
    }

    return stopPollingJob;
  }

  /**
   * Polling single job status.
   */
  function pollJob() {

    var joburl = DEFAULT_JOB_GROUP_URL;

    $.ajax({
      url: joburl,
      dataType: 'secureJSON',
      data: {jobs : jobsToPoll},
      traditional: true,
      success: function (statRes) {
        var jobs = statRes.jobList.jobList;
        for (var i = 0; i < jobs.length; ++i) {
          var jobId = jobs[i].id;
          var job = jobsToPoll[jobId];
          var jobBean = jobs[i];
          if (job && invokeCallbacks(job, jobBean)) {
            jobsToPoll.splice(i, 1);
            delete jobsToPoll[jobId];
          }
        }

        if (jobsToPoll.length > 0) {
          setTimeout(function () { pollJob(); }, POLL_RATE);
        } else {
          inProgress = 0;
        }
      }
    });
  }

  /**
   * Polling multiple jobs statuts.
   */
  function pollJobGroup(jobGroup) {
    var joburl = jobGroup.options.jobUrl ? jobGroup.options.jobUrl : DEFAULT_JOB_GROUP_URL;

    $.ajax({
      type: 'GET',
      dataType: 'secureJSON',
      traditional: true,
      url: joburl,
      cache: true,
      data: jobGroup.jobs,
      success: function (res) {
        var jobs = res.jobList.jobList;
        var rescan = 0;
        var status = 0;
        var jobList = [];
        var x = 0;

        for (var i = 0; i < jobs.length; ++i) {
          var jobStatus = jobs[i].status;

          if (jobStatus != 'COMPLETED') {
            if (jobs[i].status == 'IN_PROGRESS') {
              jobList[x++] = jobs[i].id;
              rescan = 1;
            } else if (jobs[i].status == 'FAILED' ||
                       jobs[i].status == 'EXPIRED') {
              status = 1;
              rescan = 0;
              break;
            } else if (jobs[i].status == 'CANCELLED') {
              status = 2;
              rescan = 0;
              break;
            }
          }
        }

        if (rescan === 0) {
          if (status === 0) {  /* status 0 is completed */
            jobGroup.options.onSuccess(res);
          } else if (status == 1) { /* status 1 is failed */
            jobGroup.options.onFailure(res);
          } else if (status == 2) { /* status 2 is cancelled */
            jobGroup.options.onFailure(res);
          }
        } else {
          jobGroup.options.onProgress(res);
          jobGroup.jobs = { jobs : jobList };
          setTimeout(function () { pollJobGroup(jobGroup); }, POLL_RATE);
        }
      }
    });
  }

  /**
   * Polling single job details.
   */
  function specialPollJob(job) {

    var joburl = job.options.jobUrl ? job.options.jobUrl : DEFAULT_JOB_URL;

    $.ajax({url: joburl,
            dataType: 'secureJSON',
            traditional: true,
            data: {jobid: job.jobId},
            success: function (response) {
              if (!invokeCallbacks(job, response)) {
                setTimeout(function () { specialPollJob(job); }, POLL_RATE);
              }
            }
           }
          );
  }

  function getOptions(options) {
    return _.defaults({}, options || {}, DEFAULT_OPTIONS);
  }

  return  {
    /**
     * Adds a job to monitor
     * @param jobId         The id of the job
     * @param options       Options for monitoring.  Includes:
     *    onSuccess - called if the job completes successfully
     *    onFailure - called if the job failed
     *    onProgress - called if the job in progress
     *    jobUrl    - URL used to retrieve the job status.  Defaults to the
     *                standard job controller if not specified
     */
    addJob: function (jobId, options) {
      var job = { jobId: jobId,
                  options: getOptions(options)
                };
      if (!options.jobUrl) {
        startJob(job);
      } else {
        specialPollJob(job);
      }
    },

    /**
     * Adds a list of jobs to monitor
     * @param jobIds        The list of ids to monitor
     * @param options       Options for monitoring.  Includes:
     *    onSuccess - called if the job completes successfully
     *    onFailure - called if the job failed
     *    onProgress - called if the job in progress
     *    jobUrl    - URL used to retrieve the job status.  Defaults to the
     *                standard job controller if not specified
     */
    addJobGroup: function (jobIds, options) {
      var jobGroup = {
        jobs: { jobs : jobIds },
        options: getOptions(options)
      };

      pollJobGroup(jobGroup);
    },

    /**
     * Retrieve a job
     *
     * @param jobId       The job ID
     * @param onResult    Called when the job retrieval completes.  The retrieved job
     *                    is passed as the sole argument
     */
    getJob: function (jobId, onResult) {
      $.ajax({
        url: DEFAULT_JOB_URL,
        dataType: 'secureJSON',
        data: {jobid: jobId},
        traditional: true,
        success: onResult
      });
    }
  };

});
