define([
  'underscore',
  './StringUtil',
  './TemplateUtil'
], function (_, StringUtil, TemplateUtil) {

  var GOOGLE_APP_ADMIN_PATH = '/admin/app/google/',
      GOOGLE_APP_INSTANCE_ADMIN_PATH = '/admin/app/google/instance/';

  return {
    ANDROID_RUNTIME_PERMISSIONS_QUICK_PICK_OPTIONS: {
      PROMPT: StringUtil.localize(
        'mobile.mobileclientassignments.nativeApp.form.runTimePermissions.quickPick.options.prompt'),
      ALLOW: StringUtil.localize(
        'mobile.mobileclientassignments.nativeApp.form.runTimePermissions.quickPick.options.allow'),
      DENY: StringUtil.localize(
        'mobile.mobileclientassignments.nativeApp.form.runTimePermissions.quickPick.options.deny'),
      CUSTOMIZE: StringUtil.localize(
        'mobile.mobileclientassignments.nativeApp.form.runTimePermissions.quickPick.options.customize')
    },

    ANDROID_RUNTIME_PERMISSION_OPTIONS: {
      PROMPT: StringUtil.localize('mobile.mobileclientassignments.nativeApp.form.runTimePermissions.options.prompt'),
      ALLOW: StringUtil.localize('mobile.mobileclientassignments.nativeApp.form.runTimePermissions.options.allow'),
      DENY: StringUtil.localize('mobile.mobileclientassignments.nativeApp.form.runTimePermissions.options.deny')
    },

    NONE_ANDROID_RUNTIME_PERMISSION_OPTION: {
      NONE: StringUtil.localize(
        'mobile.mobileclientassignments.nativeApp.form.runTimePermissions.quickPick.options.none')
    },

    // JAVA int type range
    MANAGED_APP_CONFIGURATION_INTEGER_INCLUSIVE_RANGE: {
      MAX: Math.pow(2, 31) - 1,
      MIN: -Math.pow(2, 31)
    },

    getManagedAppConfigurationType: function (platform) {
      // types to be supported:
      //   CHOICE: 'Choice',
      //   HIDDEN: 'Hidden',
      //   OBJECT: 'Object'
      switch (platform) {
      case 'ANDROID':
        return {
          STRING: 'String',
          BOOLEAN: 'Boolean',
          INT: 'Integer',
          MULTISELECT: 'Multi'
        };
      case 'iOS':
        return {
          STRING: 'String',
          BOOLEAN: 'Boolean',
          INT: 'Integer'
        };
      default:
        return {};
      }
    },

    getDeviceStatusIcon: function (status, topCommand) {
      if (topCommand === 'EraseDevice') {
        return 'warning-16-yellow';
      } else {
        return this.getEnrollmentStatusIcon(status);
      }
    },
    getDeviceStatusText: function (status, topCommand) {
      if (topCommand === 'EraseDevice') {
        return 'Pending Factory Reset';
      } else {
        return this.getEnrollmentStatusText(status);
      }
    },
    getEnrollmentStatusIcon: function (status) {
      var enrolledIcon = 'success-16-green',
          unenrolledIcon = 'remove-16',
          enrollingIcon = 'omm-enrolling-16',
          warningIcon = 'warning-16-yellow',
          errorIcon = 'error-16-red';

      var statusIcons = {
        NEW: enrollingIcon,
        AUTHENTICATED : enrollingIcon,
        COMPLETED: enrolledIcon,
        DEPROVISIONED: unenrolledIcon,
        EXPIRED: warningIcon,
        CHECKOUT: unenrolledIcon,
        ERROR: errorIcon,
        ERASED: unenrolledIcon
      };

      if (_.has(statusIcons, status)) {
        return statusIcons[status];
      } else {
        return errorIcon;
      }
    },
    getEnrollmentStatusText: function (status) {
      var statusText = {
        NEW: 'Enrolling',
        AUTHENTICATED : 'Enrolling',
        COMPLETED: 'Enrolled',
        DEPROVISIONED: 'Deprovisioned',
        EXPIRED: 'Expired',
        CHECKOUT: 'Deprovisioned',
        ERROR: 'Error',
        ERASED: 'Erased'
      };
      if (_.has(statusText, status)) {
        return statusText[status];
      } else {
        return status !== undefined ? status : 'Unavailable';
      }
    },
    getDeviceIcon: function (platform, deviceType) {
      var deviceIcons = {
        ANDROID: {
          SMARTPHONE: 'icon-android-phone-32',
          TABLET: 'icon-android-tab-32'
        },
        IOS: {
          SMARTPHONE: 'icon-iphone-32',
          TABLET: 'icon-ipad-32',
          POD: 'icon-ipod-touch-32'
        },
        OSX: {
          LAPTOP: 'icon-laptop-32'
        },
        WINDOWS: {
          LAPTOP: 'icon-laptop-32'
        },
        UNKNOWN: 'icon-unknown-32'
      };

      if (_.has(deviceIcons, platform) && _.has(deviceIcons[platform], deviceType)) {
        return deviceIcons[platform][deviceType];
      } else {
        return deviceIcons['UNKNOWN'];
      }
    },

    getJailBreakText: function (platform) {
      var jailBreakText = {
        ANDROID: 'Rooted',
        IOS: 'Jailbroken',
        UNKNOWN: ''
      };

      if (_.has(jailBreakText, platform)) {
        return jailBreakText[platform];
      } else {
        return jailBreakText['UNKNOWN'];
      }

    },
    getName: function (model) {
      if (model.get('deviceName') === null) {
        return 'Unknown';
      } else {
        return model.get('deviceName');
      }
    },

    getDisplayNameByDeviceType: function (deviceType, includePlatformName) {
      includePlatformName || (includePlatformName = false);
      var SUPPORTED_PLATFORMS_DEVICES = {
        'IOS_UNIVERSAL': {platform: 'iOS', device: 'Universal'},
        'IOS_IPAD': {platform: 'iOS', device: 'iPad'},
        'IOS_IPHONE': {platform: 'iOS', device: 'iPhone'},
        'ANDROID_UNIVERSAL': {platform: 'Android', device: 'Universal'}
      };
      var platformAndDevice = SUPPORTED_PLATFORMS_DEVICES[deviceType];
      if (platformAndDevice) {
        return includePlatformName ?
          platformAndDevice.platform + ' (' + platformAndDevice.device + ')' : platformAndDevice.device;
      }
      return 'Unknown';
    },

    /* These are temporary and will be removed or updated after we have more device info during enrollment*/
    getDeviceOS: function (platform) {
      // @see MobilePlatform.java
      var os = {
        iOS: StringUtil.localize('os.ios'),
        IOS: StringUtil.localize('os.ios'),
        ANDROID: StringUtil.localize('os.android'),
        OSX: StringUtil.localize('os.osx'),
        WINDOWS: StringUtil.localize('os.Windows')
      };

      if (platform && os[platform]) {
        return os[platform];
      } else {
        return 'Unknown';
      }
    },
    getDeviceType: function (deviceType) {
      !_.isString(deviceType) && (deviceType = '');
      var device = deviceType.toLowerCase().replace(/(?:^|\s)[a-z]/g, function (m) {
        return m.toUpperCase();
      });
      return device;
    },

    /* These two method will change when we have the os version and MDM type*/
    canUnenroll: function (status) {
      return this.getEnrollmentStatusText(status) === 'Enrolled';
    },
    canWipe: function (status) {
      return this.getEnrollmentStatusText(status) === 'Enrolled';
    },

    getCustomSettings: function () {
      return {
        installFromAppStore: {
          label: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.installFromAppStore.full'),
          summary: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.installFromAppStore.summary'),
          platform: 'ALL'
        },
        promptToInstall: {
          label: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.promptToInstall.full'),
          summary: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.promptToInstall.summary'),
          platform: 'IOS'
        },
        manageIfInstalled: {
          label: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.manageIfInstalled.full'),
          summary: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.manageIfInstalled.summary'),
          platform: 'IOS'
        },
        silentInstall: {
          label: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.silentInstall.full'),
          summary: StringUtil.localize(
            'mobile.mobileclientassignments.nativeApp.form.distribution.silentInstall.summary'),
          platform: 'ANDROID'
        }
      };
    },

    getAndroidRuntimePermissionsQuickPickSelection: function (permissionsArr) {
      !_.isArray(permissionsArr) && (permissionsArr = []);
      if (_.isEmpty(permissionsArr)) {
        return 'NONE';
      } else {
        var selectedQuickPick;
        _.each(['PROMPT', 'ALLOW', 'DENY'], function (selection) {
          if (!selectedQuickPick) {
            if (_.every(permissionsArr, function (permission) {
              return permission.state === selection;
            })) {
              selectedQuickPick = selection;
            }
          }
        });
        if (!selectedQuickPick) {
          selectedQuickPick = 'CUSTOMIZE';
        }
        return selectedQuickPick;
      }
    },

    getAndroidRuntimePermissionNames: function (permissionsArr) {
      !_.isArray(permissionsArr) && (permissionsArr = []);
      var names;
      if (!_.isEmpty(permissionsArr)) {
        names = _.map(permissionsArr, _.iteratee('displayName'));
      }
      return names;
    },

    getGoogleAppSAMLInstructionURL: function (appInstanceId) {
      return TemplateUtil.tpl('' +
        'http://saml-doc.okta.com/SAML_Docs/How-to-Enable-SAML-2.0-in-Google-Apps.html?' +
        'baseAdminUrl={{{urlProtocol}}}//{{{urlHost}}}&app=google&instanceId={{id}}')({
          urlProtocol: window.location.protocol,
          urlHost: window.location.host,
          id: appInstanceId
        });
    },

    getGoogleAppLicenseManagementURL: function (primaryDomain) {
      return TemplateUtil.tpl('' +
        'https://admin.google.com/{{domain}}' +
        '/AdminHome?fral=1#DomainSettings/licensemanagerkey=GOOGLE.GAB&notab=1&' +
        'subtab=subscriptions&subtabchild=managelicenses'
      )({domain: primaryDomain});
    },

    getGoogleAppOAuthLink: function (appInstanceId) {
      return TemplateUtil.tpl(GOOGLE_APP_ADMIN_PATH + '{{id}}/oauth/authorize')({id: appInstanceId});
    },

    getGoogleAppSignOnModeLink: function (appInstanceId) {
      return TemplateUtil.tpl(GOOGLE_APP_INSTANCE_ADMIN_PATH + '{{id}}/#tab-signon')({id: appInstanceId});
    },

    getGoogleAppUserProvisionLink: function (appInstanceId) {
      return TemplateUtil.tpl(GOOGLE_APP_INSTANCE_ADMIN_PATH + '{{id}}/#tab-user-management')({id: appInstanceId});
    }
  };
});