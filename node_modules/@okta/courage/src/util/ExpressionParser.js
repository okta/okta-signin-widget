define([
  'underscore',
  'jquery'
], function (_, $) {
  var SOURCE_PREFIX = 'source.',
      APPUSER_PREFIX = 'appuser.',
      USER_PREFIX = 'user.',

  /*
   * saml is the root entity for a SAML Assertion to refer to it's attributes and values.
   * it will not be found in the normal UD-mappings otherwise.
   */
      SAML_PREFIX = 'saml.',

      SCIM_PREFIX = 'scim.';

  var getDefaultSourcePrefix = function (mappingDirection) {
    switch (mappingDirection) {
    case 'appToOkta':
      return APPUSER_PREFIX;
    case 'oktaToApp':
      return USER_PREFIX;
    case 'samlToOkta':
      return SAML_PREFIX;
    case 'scimToOkta':
      return SCIM_PREFIX;
    }
  };

  return {
    /*
     * Convert the input value to model value for API.
     */
    convertInputToModelAttrValue: function (inputValue, inputOptions, mappingDirection) {
      var oldPrefixRegex = new RegExp(SOURCE_PREFIX, 'g'),
          newPrefix = getDefaultSourcePrefix(mappingDirection),
          parsedInputValue = inputValue.replace(/\s+/g, '').replace(oldPrefixRegex, newPrefix).toLowerCase(),
          inputOptionsWithPrefix = _.map(_.keys(inputOptions), function (option) {
            return newPrefix + option;
          }),
          modelValue;
      if (parsedInputValue.indexOf(newPrefix) < 0) {
        parsedInputValue = newPrefix + parsedInputValue;
      }

      // if a match can be found from inputOptions, return the matched input option with the new prefix
      // ex. input: appuser.username -> output: appuser.userName
      _.any(inputOptionsWithPrefix, function (option) {
        if (option.toLowerCase() === parsedInputValue) {
          modelValue = option;
          return true;
        }
      });

      // if cannot easily match from inputOptions, return it as it is
      // ex.
      // - expression (firstName + ' ' + lastName)
      // - prefix is an app instance name (workday.userName)
      return modelValue || $.trim(inputValue);
    },

    /*
     * Convert the model value to input value for UI display
     */
    convertModelAttrToInputValue: function (modelValue, inputOptions, mappingDirection) {
      var oldPrefixRegex = new RegExp(SOURCE_PREFIX, 'g'),
          newPrefix = getDefaultSourcePrefix(mappingDirection),
          parsedModelValue = $.trim(modelValue).replace(oldPrefixRegex, newPrefix).toLowerCase(),
          inputOptionsWithPrefix = _.map(_.keys(inputOptions), function (option) {
            return newPrefix + option;
          }),
          inputValue;
      _.each(inputOptionsWithPrefix, function (option) {
        if (option.toLowerCase() === parsedModelValue) {
          inputValue = option;
        }
      });
      return inputValue || modelValue;
    }
  };
});