/* eslint max-params: [2, 5] */
define(['underscore',
        'shared/util/TemplateUtil',
        'shared/util/StringUtil',
        'shared/views/profile/forms/inputs/TextBoxSet',
        './OAuth2DeletableBox'],
function (_, TemplateUtil, StringUtil, TextBoxSet, OAuth2DeletableBox) {

  return TextBoxSet.extend({

    template: TemplateUtil.tpl('<a href="#" class="array-inputs-button link-button">{{addRedirectUri}}</a>'),

    enforceAlwaysHaveOneInput: function () {
      if (this.model.get(this.options.name).length === 0) {
        this.addNewElement();
      }
    },

    // @Override
    editMode: function () {
      this._setArrayObject();
      this.$el.html(this.template({addRedirectUri: StringUtil.localize('idp.config.oidc.settings.addRedirectUri')}));
      _.each(this.arrayObject, _.bind(this._addDeletableBox, this));

      this.enforceAlwaysHaveOneInput();
      this.$('.array-inputs-button').show();

      return this;
    },

    // @Override
    readMode: function () {
      this.editMode();
      this.$('.array-inputs-button').addClass('link-button-disabled');
      this.$('.array-inputs-button').hide();
    },

    _addDeletableBox: function (value, key) {
      var deletableBox = new OAuth2DeletableBox(
        _.extend(
          _.pick(this.options, 'read', 'readOnly', 'model'), {key: key, value: value, itemType: this.params.itemType}
        )
      );
      this.listenTo(deletableBox, 'updateArray', function (updatedValue) {
        if (_.isNull(updatedValue)) {
          delete this.arrayObject[key];
          this.stopListening(deletableBox);
        } else {
          this.arrayObject[key] = updatedValue;
        }
        this.update();
        this.enforceAlwaysHaveOneInput();
      });

      deletableBox.render().$el.show();
      this.$('.array-inputs-button').before(deletableBox.el);

      return deletableBox;
    }
  });
});