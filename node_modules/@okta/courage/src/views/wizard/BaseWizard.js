define([
  'jquery',
  'underscore',
  'shared/views/BaseView',
  'shared/views/forms/BaseForm',
  'shared/util/Logger',
  './WizardProgressBar',
  './WizardStateMachine',
  './WizardHelper',
  './WizardStepTitle',
  './WizardButtonBar',
  './WizardContent'
],
function ($, _, BaseView, BaseForm, Logger, WizardProgressBar, WizardStateMachine, WizardHelper, WizardStepTitle,
          WizardButtonBar, WizardContent) {
  /*eslint max-params: 0 */

  function isAutoSaveForm(form) {
    return isForm(form) && form.getAttribute('autoSave');
  }

  function isForm(form) {
    return form instanceof BaseForm;
  }

  function submitForm(form) {
    var d = $.Deferred();
    form.listenToOnce(form,   'saved', _.bind(d.resolveWith, d, form));
    form.listenTo(form.model, 'error invalid', _.bind(d.rejectWith, d, form));
    form.$el.trigger('submit');
    return d.promise();
  }

  function clearForm(wizard) {
    var form = wizard.getCurrentView();
    if (isForm(form)) {
      form.model.trigger('form:cancel');
    }
  }

  return BaseView.extend({

    className: 'o-wizard',

    template: '\
      <h1 class="o-wizard-title"></h1>\
      <div class="o-wizard-progressbar-wrap">\
        <div class="o-wizard-progressbar-bg"></div>\
        <div class="o-wizard-progress"></div>\
      </div>\
      <div class="o-wizard-step-title"></div>\
      <div class="o-wizard-step-content"></div>\
      <div class="o-wizard-button-bar"></div>\
    ',

    getCurrentView: function () {
      return this.find(function (view) {
        return view instanceof WizardContent;
      }).first();
    },

    __goToNextStep: function () {
      var promise,
          state = this.wizardState,
          currentView = this.getCurrentView();

      if (isAutoSaveForm(currentView)) {
        promise = submitForm(currentView);
      }
      else if (_.isFunction(currentView.next)) {
        promise = currentView.next();
      }

      return $.when(promise)
        .then(_.bind(state.nextStep, state))
        .done(function () {
          state.set('error', false);
          state.trigger('wizard:sync');
        })
        .fail(function () {
          state.set('error', true);
          state.trigger('wizard:error');
        })
        .always(function () {
          Logger.log(JSON.stringify(state));
        });
    },

    __goToPrevStep: function (state) {
      // mark the curent step as not done;
      clearForm(this);
      state.prevStep();

      Logger.log(JSON.stringify(state));
      // mark the prev one as pending
    },

    __init: function () {
      /* eslint max-statements: 0 */
      this.wizardState = this.options.wizardState = new WizardStateMachine(null, {
        steps: _.result(this, 'steps')
      });

      this.options.save = _.result(this, 'save');

      WizardHelper.addIf(this, 'title', '.o-wizard-title');
      this.add(WizardProgressBar, '.o-wizard-progress');
      this.add(WizardStepTitle, '.o-wizard-step-title');
      this.add(WizardContent, '.o-wizard-step-content');
      this.add(WizardButtonBar, '.o-wizard-button-bar');

      this.listenTo(this.wizardState, 'wizard:prev', function () {
        this.__goToPrevStep(this.wizardState);
      });

      this.listenTo(this.wizardState, 'wizard:next', function () {
        this.__goToNextStep();
      });

      this.listenTo(this.wizardState, 'wizard:done', this.done);
      this.listenTo(this.wizardState, 'wizard:cancel', function () {
        clearForm(this);
        this.cancel();
      });

    },

    constructor: function () {
      this.initialize = _.wrap(this.initialize, _.bind(function (initialize, options) {
        this.__init();
        initialize.call(this, options);
      }, this));

      BaseView.apply(this, arguments);
    },

    done: _.noop,
    cancel: _.noop

  });

});
