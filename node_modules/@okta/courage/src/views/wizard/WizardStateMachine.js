define(['underscore', 'shared/models/Model'], function (_, Model) {

  return Model.extend({

    props: {
      step: ['number', true, 0],
      error: ['boolean', true, false]
    },

    constructor: function (attrs, options) {
      this.__steps = _.clone(options && options.steps || []);
      Model.apply(this, arguments);
      _.bindAll(this, 'nextStep', 'prevStep');
    },

    getCurrentStep: function () {
      return this.__steps[this.get('step')];
    },

    getSteps: function () {
      return _.map(this.__steps, _.clone);
    },

    hasNextStep: function () {
      return this.__steps.length - 1 > this.get('step');
    },

    hasPrevStep: function () {
      return this.get('step') > 0;
    },

    nextStep: function () {
      if (this.hasNextStep()) {
        var currentStep = this.get('step');
        this.set({
          step: currentStep + 1,
          error: false
        });
      }
      else {
        this.trigger('wizard:done');
      }
    },

    prevStep: function () {
      if (this.hasPrevStep()) {
        var currentStep = this.get('step');
        this.set({
          step: currentStep - 1,
          error: false
        });
      }
    }

  });

});
