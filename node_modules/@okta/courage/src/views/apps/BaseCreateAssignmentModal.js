define([
  'underscore',
  'shared/util/Util',
  'shared/views/components/MultiViewModalDialog'
], function (_, Util, MultiViewModalDialog) {

  var DATA_LIST_PAGE_SIZE = 20;

  /**
   * A generic Modal for doing assignment (GAA, AA).
   * What common among those scenarios are
   * 1. an data list view is initalized when opening the modal.
   * 2. click "assign" button may switch to an form view for setting entitlements.
   * 3. switch back to data list view when entitlments save successfully.
   *
   * (This is an contiunse work from /shared/views/apps/CreateAssignmentModal.js.)
   * (see https://github.com/okta/okta-core/pull/11316 for details of changes.)
   *
   */
  return MultiViewModalDialog.extend({

    params: {
      containerId: 'create-assignment-modal',
      minWidth: 620,
      maxWidth: 688,
      autoResize: false,
      autoPosition: true
    },

    height: 535,

    /**
     * DataList View that rendering when open modal.
     *
     * @return an Okta.View
     * @abstract
     */
    datalistView: Util.constantError('datalistView is an abstract variable'),

    /**
     * Initalize collection for the #datalistView
     *
     * @return an instance of Okta.Collection
     * @abstract
     */
    getCollection: Util.constantError('getCollection is an abstract method'),

    /**
     * Create an Form View to set the entitlements.
     *
     * @return an promise that carry an instance of Okta.Form
     * @abstract
     */
    createAssignmentForm: Util.constantError('createAssignmentForm is an abstract method'),

    constructor: function () {
      // datalist view is the first view when creating assignment.
      this.View = this.datalistView;

      MultiViewModalDialog.prototype.constructor.apply(this, arguments);
    },

    initialize: function (options) {

      // initalize collection
      this.collection = this.getCollection();
      // set to 'options.collection' to pass all the way down to child views.
      options.collection = this.collection;

      // "assign" button event
      this.listenTo(this.state, 'assign', this.handleAssignment);
      // data list toolbar search event
      this.listenTo(this.state, 'change:unassignedSearchQuery', this.fetchCollection);

      this.listenTo(this.state, 'doneAssignment', this.remove);

      _.bindAll(this, 'fetchCollection', 'updateCollection', 'handleAssignment',
                'transitToFormView', 'transitToListView', 'handleAssignSuccessfully');
    },

    /**
     * Override 'render' but not 'postRender' since `super.render` has extra actions after postRender.
     */
    render: function () {

      MultiViewModalDialog.prototype.render.apply(this, arguments);

      this.fetchCollection();
    },

    fetchCollection: function () {
      return this.collection.fetch({
        data: {
          q: this.state.get('unassignedSearchQuery'),
          limit: DATA_LIST_PAGE_SIZE
        }
      });
    },

    updateCollection: function () {
      this.collection.trigger('itemAssigned', this.assignmentId);
    },

    /**
     * Handler for clicking "assign" button.
     */
    handleAssignment: function (assignmentId) {
      // keep tracking the assignmentId to do further update. @see #updateCollection
      this.assignmentId = assignmentId;

      this.createAssignmentForm(assignmentId)
        .then(this.transitToFormView);
    },

    transitToFormView: function (form) {
      // may switch to form to do assignment or get assigned at datalist view when an bookmark app.
      if (form) {
        this.listenTo(form, 'cancel', this.transitToListView);
        this.listenToOnce(form.model, 'sync', this.handleAssignSuccessfully);
        this.switchView(form);
      }
    },

    handleAssignSuccessfully: function () {
      // transit before updateCollection because need to initalize events listner ahead.
      this.transitToListView();
      this.updateCollection();
    },

    transitToListView: function () {
      this.switchView(this.datalistView);
      // re-sync collection to datalistView since View will be re-initialized when "switchView".
      this.collection.trigger('sync');
    },

    /**
     * To trigger an custom event in order to refresh to page after closing modal
     * and re-load the assigned group data list.
     *
     * @Override
     */
    remove: function () {
      MultiViewModalDialog.prototype.remove.apply(this, arguments);
      this.state.trigger('closeModal');
    }

  });
});
