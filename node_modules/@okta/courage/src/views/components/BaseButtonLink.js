define(['underscore', 'shared/views/BaseView'], function (_, BaseView) {

  var disabledEvents = {
    click: function (e) {
      e.preventDefault();
      e.stopPropagation();
    }
  };

  return BaseView.extend({

    /**
     * @class BaseButtonLink
     * @extends Okta.View
     * @private
     * A configurable button.
     *
     * ```javascript
     * var View = BaseButtonLink.extend({
     *   title: 'Click Me',
     *   icon: 'help-text'
     * })
     * ```
     */

    /**
     * @property {String} [title] The main text for the button
     */

    /**
     * @property {String} [href] The link for the button
     */

    /**
     * @property {String} [icon]
     * CSS class for the icon to display. See [Style guide](http://rain.okta1.com:1802/su/dev/style-guide#icons)
     */

    /**
     * @property {Object} [events] a [Backbone events](http://backbonejs.org/#View-delegateEvents) hash
     */

    tagName: 'a',

    template: '{{#if icon}}<span class="icon {{icon}}"></span>{{/if}}{{#if title}}{{title}}{{/if}}',

    constructor: function (options) {
      this.options = options || {};
      var data = this.getTemplateData();

      this.disabled = false;

      BaseView.apply(this, arguments);

      this.$el.addClass('link-button');
      if (data.icon) {
        this.$el.addClass('link-button-icon');
        if (!data.title) {
          this.$el.addClass('icon-only');
        }
      }
    },

    getTemplateData: function () {
      return {
        href: this.__getAttribute('href'),
        title: this.__getAttribute('title'),
        icon: this.__getAttribute('icon')
      };
    },

    render: function () {
      BaseView.prototype.render.apply(this, arguments);
      var data = this.getTemplateData();
      this.$el.attr('href', data.href || '#');
      return this;
    },

    __getAttribute: function (name, defaultValue) {
      var value = _.resultCtx(this.options, name, this);
      if (_.isUndefined(value)) {
        value = _.result(this, name);
      }
      return !_.isUndefined(value) ? value : defaultValue;
    },

    enable: function () {
      this.toggle(true);
    },

    disable: function () {
      this.toggle(false);
    },

    toggle: function (enable) {
      this.disabled = !enable;
      this.$el.toggleClass('link-button-disabled btn-disabled disabled', this.disabled);

      // delegateEvents asynchronously in case the button is not yet added to the DOM
      // in these cases the alternate events won't work
      _.defer(_.bind(function () {
        this.delegateEvents(this.disabled ? disabledEvents : null);
      }, this));
    }

  });

});
