/* eslint max-params: [2, 7] */
define([
  'shared/views/BaseView',
  'shared/views/components/BaseModalDialog',
  'shared/util/StateMachine',
  './MappingsView',
  './Loading',
  'shared/models/ud/ProfilesMapping',
  'shared/models/ud/PreviewMapping'
], function (BaseView, BaseModalDialog, StateMachine, MappingsView, Loading, ProfilesMapping, PreviewMapping) {

  // Note: do not rename the container id,
  // it is being used different places (css & js) to limit the scope to this modal
  var containerId = 'ud-attribute-mapping-modal';

  return BaseModalDialog.extend({
    events: {
      'click input.cancel': 'remove'
    },

    params: {
      containerId: containerId,
      minWidth: 1020,
      autoResize: true
    },

    initialize: function (options) {
      options || (options = {});
      this._initState(options);
      this.model = new ProfilesMapping.Model();
      this.previewModel = new PreviewMapping();
      this.showOnlyTabId = options.showOnlyTabId;
      this.add(new Loading({state: this.state, model: this.model, previewModel: this.previewModel}));
      this._addMappingsView();
      this.listenTo(this.state, 'showError', this.scrollToError);
    },

    render: function () {
      BaseView.prototype.render.apply(this, arguments);
      this.$el.modal(this.params);
      return this;
    },

    scrollToError: function () {
      var errorMessageOffsetTop = this.$('.property-mapping-modal').offset().top,
          $scrollable = this.$el.parents('#' + containerId);
      if (errorMessageOffsetTop < 0) {
        $scrollable
          .animate({scrollTop: $scrollable.scrollTop() + errorMessageOffsetTop - 15}, 300);
      }
    },

    _initState: function (options) {
      // appInstanceId should always provided for the current use cases
      this.state = new StateMachine({
        tabId: (options.appName === 'oidc_client') ? 'oktaToApp' : 'appToOkta',
        appInstanceId: options.appInstanceId
      });
    },

    _addMappingsView: function () {
      this.mappingsView = new MappingsView({
        model: this.model,
        previewModel: this.previewModel,
        showOnlyTabId: this.showOnlyTabId,
        state: this.state,
        settings: this.settings
      });
      this.add(this.mappingsView);

      this.listenTo(this.mappingsView, 'cancel', this.remove);
      this.listenTo(this.mappingsView, 'resize', this.resize);
    }
  });
});
