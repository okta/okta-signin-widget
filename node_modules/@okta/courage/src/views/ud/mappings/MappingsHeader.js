define([
  'shared/views/BaseView',
  'shared/util/TemplateUtil',
  'shared/util/URLs'
], function (BaseView, TemplateUtil, URLs) {

  return BaseView.extend({
    tagName: 'thead',

    template: TemplateUtil.tpl('\
      <tr>\
        <th class="source-property">\
          <span class="app-logo">\
            <img src="{{sourceLogoUrl}}" class="app-logo-thumb">\
          </span>\
          <span class="app-info">\
            <p class="app-name">{{source}} User Profile</p><p class="code-alias">{{sourceCodeAlias}}</p></span>\
        </th>\
        <th class="property-mapping-dropdown">\
        </th>\
        <th class="target-property">\
          <span class="app-logo">\
            <img src="{{targetLogoUrl}}" class="app-logo-thumb">\
          </span>\
          <span class="app-info">\
            <p class="app-name">{{target}} User Profile</p><p class="code-alias">{{targetCodeAlias}}</p></span>\
        </th>\
      </tr>\
    '),

    renderTemplate: function (template) {
      var sourceModel = this.options.appModel,
          source = sourceModel.get('label'),
          target = 'Okta',
          sourceCodeAlias = 'appuser',
          targetCodeAlias = 'user',
          sourceLogoUrl = sourceModel.get('logoHref') || URLs.APP_DEFAULT_LOGO_RESOURCE,
          targetLogoUrl = URLs.OKTA_DEFAULT_LOGO_RESOURCE;
      if (this.state.get('tabId') === 'oktaToApp') {
        var tempSource = source,
            tempSourceCodeAlias = sourceCodeAlias,
            tempSourceLogoUrl = sourceLogoUrl;
        source = target;
        target = tempSource;
        sourceCodeAlias = targetCodeAlias;
        targetCodeAlias = tempSourceCodeAlias;
        sourceLogoUrl = targetLogoUrl;
        targetLogoUrl = tempSourceLogoUrl;
      }

      return template({
        source: source,
        target: target,
        sourceCodeAlias: sourceCodeAlias,
        targetCodeAlias: targetCodeAlias,
        sourceLogoUrl: sourceLogoUrl,
        targetLogoUrl: targetLogoUrl
      });
    }
  });
});
