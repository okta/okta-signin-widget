/* eslint max-params: [2, 7] */
define([
  'underscore',
  'shared/views/BaseView',
  'shared/util/TemplateUtil',
  'shared/util/SchemaUtil',
  './UsernameDefaultView',
  './components/SourceInput',
  './components/DropDownWrapper'
], function (_, BaseView, TemplateUtil, SchemaUtil, UsernameDefaultView, SourceInput, DropDownWrapper) {

  return BaseView.extend({
    tagName: 'tr',

    events: {
      'click .override-mapping': function (e) {
        e.preventDefault();
        this.showUserNameSourceInput();
        this.toggleMappingDropDown();
      },
      'click .reset-mapping': function (e) {
        e.preventDefault();
        this.showUserNameDefaultView();
        this.toggleMappingDropDown();
      }
    },

    template: TemplateUtil.tpl('\
      <td class="source-property" data-se=source.{{name}}></td>\
      <td class="property-mapping-column" data-se=mappingType.{{name}}>\
      <span class="property-mapping-dropdown"></span></td>\
      <td class="target-property">\
        <div class="o-form-fieldset o-form-label-top">\
          <div class="o-form-label"><label>{{title}}</label></div>\
          <div class="o-form-input">\
            <div class="target-name">{{name}}</div><div class="target-type">{{__displayTypeLabel__}}</div>\
          </div>\
        </div>\
        <div></div>\
      </td>\
    '),

    initialize: function () {
      this.fieldType = SchemaUtil.getSourceUsernameType(
        this.state.get('tabId'), this.model.get('targetField'), this.options.appModel.get('name')
      );

      /*
       * For username type input,
       * initialize username view if no override value (username is set through app by default),
       * otherwise, initialize the source input with the override value
       */
      if (this._shallRenderUserNameDefaultView()) {
        this._initUserNameDefaultView();
        this.add(this.userNameDefaultView, '.source-property');
      } else {
        this._initSourceInput();
        this.add(this.sourceInput, '.source-property', {bubble: true});
        this._addMappingDropDown();
      }

      this.listenTo(this.model, 'change:sourceExpression', function () {
        this.toggleNoMappingClass();
        this.model.trigger('updatePushStatus', this.state.get('tabId'), this.options.appModel.get('features'));
      });
    },

    _shallRenderUserNameDefaultView: function () {
      var appName = this.options.appModel.get('name'),
          isUsernameField = this.fieldType !== SchemaUtil.USERNAMETYPE.NONE;

      // 1. feature CONSOLIDATE_USERNAME_EL is designated to consolidate username change in one place
      //    with except of IDP
      // 2. (backward compatible) when no mapping has already been set for username
      if (this.settings.hasFeature('CONSOLIDATE_USERNAME_EL')) {
        return isUsernameField && appName !== 'saml_idp';
      } else {
        return isUsernameField && !this.model.get('sourceExpression');
      }
    },


    renderTemplate: function (template) {
      return template(_.pick(this.model.get('__targetAttribute__'), 'title', 'name', '__displayTypeLabel__'));
    },

    render: function () {
      BaseView.prototype.render.apply(this, arguments);
      this.toggleNoMappingClass();
      return this;
    },

    showUserNameSourceInput: function () {
      if (!this.sourceInput) {
        this._initSourceInput();
        this.add(this.sourceInput, '.source-property');
      } else {
        this.$('.source-property .o-form-fieldset').show();
      }
      this.model.set('sourceExpression', this.$('.source-property input[name="sourceExpression"]').val());
    },

    showUserNameDefaultView: function () {
      if (!this.userNameDefaultView) {
        this._initUserNameDefaultView();
        this.add(this.userNameDefaultView, '.source-property');
      } else {
        this.$('.source-property .username-default').show();
      }
      this.model.set('sourceExpression', '');
    },

    toggleNoMappingClass: function () {
      this.$el.toggleClass(
        'no-mapping',
        _.isEmpty(this.model.get('sourceExpression')) && !this.userNameDefaultView
      );
    },

    _initUserNameDefaultView: function () {
      this.userNameDefaultView = new UsernameDefaultView({
        settings: this.settings,
        state: this.state,
        model: this.options.appModel,
        previewModel: this.options.previewModel
      });
    },

    _initSourceInput: function () {
      this.sourceInput = new SourceInput({'id': 'input_source_property_' + this.options.idx,
        'label-top': true,
        'model': this.model,
        'appModel': this.options.appModel,
        'state': this.state,
        'sourceOptions': this.options.sourceOptions,
        'field': this.fieldType
      });
    },

    _addMappingDropDown: function () {
      this.mappingDropDown = this.add(DropDownWrapper, '.property-mapping-dropdown').last();
    },

    toggleMappingDropDown: function () {
      if (!this.mappingDropDown) {
        this._addMappingDropDown();
      }
      else {
        this.$('.property-mapping-dropdown').toggle();
      }
    }
  });
});
