/* eslint max-params: [2, 9] */
define([
  'underscore',
  'jquery',
  'shared/views/BaseView',
  'shared/util/TemplateUtil',
  'shared/util/StringUtil',
  'shared/views/components/ErrorMessage',
  './Mappings',
  './PreviewMapping',
  './ModalFooter'
], function (_, $, BaseView, TemplateUtil, StringUtil, ErrorMessage, Mappings, PreviewMapping, ModalFooter) {

  return BaseView.extend({
    className: 'property-mapping-modal',

    template: '\
      <div id="attributes-mapping-list">\
        <div id="attributes-mapping-error"></div>\
      </div>\
    ',

    stateEvents: {
      'save:mapping': '_saveMapping',
      'apply:mapping': '_applyMapping'
    },

    initialize: function () {
      _.bindAll(this,
        '_saveSuccess', '_saveError', '_applySuccess', '_applyError', '_fetchPreviewSuccess', '_fetchPreviewError');

      this.previewModel = this.options.previewModel;
      this.mappings = new Mappings({state: this.state,
                                    collection: this.collection,
                                    settings: this.settings,
                                    sourceOptions: this.options.sourceOptions,
                                    appModel: this.options.appModel,
                                    previewModel: this.previewModel
                                  });

      this.add(this.mappings, '#attributes-mapping-list');
      this.add(ModalFooter);
      this.listenTo(this.previewModel, 'change:userId', this.onUserIdChange);
    },

    _askApplyMappingOptions: function () {
      if (!this.model.isSynced()) {
        // if the mapping had changed, show reapply footer
        return {askApply: true};
      } else if (this.model.hasManagerAssistantInMapping()) {
        // even if the mapping had not changed, as long as if contains manager/assistant info, show reapply footer
        return {askApply: true, updateManagerAssistantInfo: true};
      }
      // otherwise (the mapping has not changed, and it does not contain manager/assistant info)
      // do not show reapply footer
      return {askApply: false};
    },

    _saveMapping: function () {
      var propertyMappings = this.collection.toJSON().concat(this.options.systemPropertyMappings);
      this.model.set('propertyMappings', propertyMappings);
      if (this.model.get('sourceId') && this.model.get('targetId')) {
        var self = this,
            askApplyOptions = this._askApplyMappingOptions();
        return this.model
          .save()
          .done(function () {
            var options = {};
            if (_.isBoolean(askApplyOptions.updateManagerAssistantInfo)) {
              options.updateManagerAssistantInfo = askApplyOptions.updateManagerAssistantInfo;
            }
            self._saveSuccess(askApplyOptions.askApply, options);
          })
          .fail(self._saveError);
      } else {
        return new $.Deferred().resolve();
      }
    },

    _saveError: function (resp) {
      this._clearError();
      var response = resp.responseJSON,
          error;
      if (_.isArray(response.errorCauses) && response.errorCauses.length > 0) {
        error = new ErrorMessage({errors: response.errorCauses});
      } else {
        error = new ErrorMessage({errors: [{errorSummary: response.errorSummary}]});
      }

      this.add(error, '#attributes-mapping-error');
      this.state.trigger('showError');
    },

    _saveSuccess: function (askApply, options) {
      if (askApply === true) {
        this.state.trigger('askapply:mapping', options);
      } else {
        this.notify('success', 'Mappings are saved.');
        this.trigger('cancel', this.model);
      }
    },

    _applyMapping: function () {
      var self = this;
      $.ajax({
        url: TemplateUtil.tpl(
          '/api/internal/v1/mappings/reapply?source={{sourceId}}&target={{targetId}}')(self.model.toJSON()),
        type: 'PUT',
        dataType: 'json'
      })
      .done(self._applySuccess)
      .fail(self._applyError);
    },

    _applySuccess: function () {
      this.notify('success', StringUtil.localize('universal-directory.mappings.apply.success'));
      this.trigger('cancel', this.model);
    },

    _applyError: function (resp) {
      this.notify('error', resp.responseJSON.errorSummary);
      this.trigger('cancel', this.model);
    },

    _previewMapping: function () {
      var self = this;
      this.previewModel.set('propertyMappings', this.collection.toJSON());
      this.previewModel
        .save()
        .done(self._fetchPreviewSuccess)
        .fail(self._fetchPreviewError);
    },

    _fetchPreviewSuccess: function () {
      this.previewView && this.previewView.remove();
      this._clearError();
      this.previewView = new PreviewMapping({
        settings: this.settings,
        state: this.state,
        model: this.previewModel,
        appModel: this.options.appModel,
        previewModel: this.options.previewModel
      });
      this.mappings.$el.hide();
      this.add(this.previewView, '#attributes-mapping-list');
      this.state.trigger('previewViewReady');
    },

    _fetchPreviewError: function (resp) {
      this._saveError(resp);
    },

    onUserIdChange: function () {
      // when user name is removed from the user picker, userId is unset from preview model,
      // restore mappings view
      if (!this.previewModel.get('userId')) {
        this.previewView && this.previewView.remove();
        this._clearError();
        this.mappings.$el.show();
      } else {
        this._previewMapping();
      }
    },

    _clearError: function () {
      this.$('#attributes-mapping-error').empty();
    }
  });
});
