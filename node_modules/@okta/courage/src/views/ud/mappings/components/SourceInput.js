/* eslint max-params: [2, 6] */
define([
  'shared/views/forms/helpers/InputWrapper',
  'shared/views/forms/helpers/InputLabel',
  'shared/views/forms/helpers/InputContainer',
  'shared/util/StringUtil',
  './UsernameSourceInputExplain',
  './TextSelect'
], function (InputWrapper, InputLabel, InputContainer, StringUtil, UsernameSourceInputExplain, TextSelect) {

  return InputWrapper.extend({

    events: {
      'click .reset-mapping': 'hideView'
    },

    initialize: function () {
      var attributeName = 'sourceExpression';
      this.sourceOptions = this.options.sourceOptions;

      this.sourceInput = new TextSelect({
        state: this.state,
        model: this.model,
        name: attributeName,
        placeholder: StringUtil.localize('universal-directory.mappings.sourceinput.placeholder'),
        options: this.sourceOptions
      });

      this.listenTo(this.model, 'change:' + attributeName, this.update);

      this.add(InputLabel, {options: {label: ' '}});

      this.add(
        InputContainer,
        {
          options: {
            model: this.options.appModel,
            input: this.sourceInput,
            customExplain: this.options.field === 'non-username' || this.options.appModel.get('name') === 'saml_idp' ?
              undefined : new UsernameSourceInputExplain({
                field: this.options.field,
                model: this.options.appModel
              })
          }
        }
      );
    },

    render: function () {
      InputWrapper.prototype.render.apply(this, arguments);
      this.update();
      return this;
    },

    hideView: function (e) {
      e.preventDefault();
      this.$el.hide();
    },

    update: function () {
      this.sourceInput.updateInput();
      this._updateLabel();
    },

    _updateLabel: function () {
      var $label = this.$('.o-form-label');
      if ($label) {
        // for username target field that uses default mapping
        // .o-form-lable will not be found
        // because it does not display the input box
        var newLabel = StringUtil.localize('universal-directory.mappings.sourceinput.label.expression'),
            sourcePropertyDisplayValue = this.sourceInput.val(),
            sourceProperty = this.sourceOptions[sourcePropertyDisplayValue];

        if (sourceProperty && sourceProperty.hasOwnProperty('title')) {
          newLabel = sourceProperty.title;
        } else if (!sourcePropertyDisplayValue) {
          newLabel = StringUtil.localize('universal-directory.mappings.sourceinput.label.empty');
        }

        $label.find('label').html(newLabel);
      }
    }
  });
});
