define([
  'jquery',
  'underscore',
  'shared/util/TemplateUtil',
  'shared/views/forms/inputs/TextSelect',
  'shared/util/ExpressionParser',
  'vendor/plugins/typeahead'
], function ($, _, TemplateUtil, TextSelect, ExpressionParser) {

  var typeaheadMatch = function (options) {
    return function findMatches(q, cb) {
      // an array that will be populated with substring matches
      var matches = [];

      // regex used to determine if a string contains the substring `q`
      var substrRegex = new RegExp(q, 'i');

      // iterate through the pool of strings and for any string that
      // contains the substring `q`, add it to the `matches` array
      $.each(options, function (key, value) {
        if (substrRegex.test(key)) {
          // the typeahead jQuery plugin expects suggestions to a
          // JavaScript object, refer to typeahead docs for more info
          matches.push({key: key, value: value});
        }
      });

      cb(matches);
    };
  };

  return TextSelect.extend({
    optionTemplate: TemplateUtil.tpl('\
      <li class="active-result clearfix">\
        <div class="prop-col-1">\
          <p class="property-key">{{key}}</p>\
        </div>\
        <div class="prop-col-2"><p>{{value.__displayTypeLabel__}}</p></div>\
        <div class="prop-col-3">\
          <p>{{value.title}}{{#if value.description}} &middot; {{value.description}}{{/if}}</p>\
        </div>\
      </li>\
    '),

    optionsFooter: TemplateUtil.tpl('\
      <div class="clearfix chzn-footer">\
        <a class="icon-16" target="_blank" \
          href="http://developer.okta.com/docs/getting_started/okta_expression_lang.html">\
          <span class="icon expression-16"></span>\
          {{i18n code="universal-directory.mappings.typeahead.footer.expressionsLinkText"}}\
        </a>\
      </div>\
    '),

    additionalEvents: {
      'click .active-result': function (e) {
        var target;
        target = $(e.target).hasClass('active-result') ? $(e.target) : $(e.target).parents('.active-result').first();
        if (target.hasClass('highlighted')) {
          this._removeClass();
          this.$('input[name="' + this.options.name + '"]')
            .val(target.find('.property-key').text())
            .trigger('change');
        }
      },
      'click .chzn-footer a': function (e) {
        // redirect a click anywhere on the footer to the link
        if (!e.target.href) {
          // the user clicked a child or parent element
          // kill the event and refire it on the <a>
          e.preventDefault();
          e.stopPropagation();
          $(e.currentTarget).find('a')[0].click();
        } else {
          // removing the chzn-with-drop class hides the dropdown
          this._removeClass();
        }
      }
    },

    /*
     * @Override
     */

    initialize: function () {
      TextSelect.prototype.initialize.apply(this, arguments);
      this.events = _.extend({}, TextSelect.prototype.events, this.additionalEvents);
    },

    render: function () {
      TextSelect.prototype.render.apply(this, arguments);
      _.defer(_.bind(this.addTypeAhead, this));
      return this;
    },

    addTypeAhead: function () {
      var self = this;
      // jquery typeahead API: jQuery#typeahead(options, [*datasets])
      this.$('input[name="' + this.options.name + '"]')
        .typeahead({
          highlight: true // pattern matches for the current query will be wrapped in <strong></strong>
        }, {
          displayKey: 'key',
          source: typeaheadMatch(this.options.options),
          templates: {
            suggestion: this.optionTemplate,
            footer: this.optionsFooter
          }
        })
        .on('typeahead:selected typeahead:autocompleted', function (e, data) {
          // typeahead:selected --> when select (click enter or mouse click on the highlighted suggestion)
          // typeahead:autocompleted --> when use the right arrow key to complete the selection of the hint
          self.$('input').typeahead('val', data.key).trigger('change');
          self.update();
        })
        .on('typeahead:autocompleted', function () {
          // typeahead:autocompleted --> when use the right arrow key to complete the selection of the hint
          $(this).typeahead('close');
        });

    },

    editMode: function () {
      TextSelect.prototype.editMode.apply(this, arguments);
      this.$('.chzn-drop').append(this.optionsFooter);
      return this;
    },

    to: function () {
      return ExpressionParser.convertInputToModelAttrValue(
        this.val(), this.options.options, this.state.get('tabId'));
    },

    val: function () {
      // this.$('input').typeahead('val') always return undefined
      return this.$('input[name="' + this.options.name + '"]').val();
    },

    updateInput: function () {
      if (this.model.get(this.options.name) !== this.val()) {
        // model value is changed and it's different from input value,
        // update the input view accordingly,
        // for example, append prefix to source input if it is an exact match of a dropdown selection.
        // note: this is opposite to events from events and additionalEvents objects.
        this.$('input').typeahead('val', ExpressionParser.convertModelAttrToInputValue(
          this.model.get(this.options.name),
          this.options.options,
          this.state.get('tabId'))
        );
      }
    }
  });
});
