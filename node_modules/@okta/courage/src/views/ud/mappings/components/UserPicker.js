/* global Bloodhound */
define([
  'jquery',
  'underscore',
  'shared/views/BaseView',
  'shared/util/TemplateUtil',
  'vendor/plugins/typeahead'
], function ($, _, BaseView, TemplateUtil) {

  /* Okta user picker
   * - customize look and feel to call out the preview feature
   * - limit to one selection in input
   */
  var suggestionTemplate = TemplateUtil.tpl('\
        <li class="active-result clearfix">\
          <p>{{name}} {{#if email}}({{email}}){{/if}}</p>\
        </li>\
      '),
      emptyTemplate = TemplateUtil.tpl('<p class="no-suggestion">{{i18n code="searchResult.empty"}}</p>');

  return BaseView.extend({

    className: 'preview-user-picker o-form-input-group float-l',

    template: '\
      <div class="o-form-input-group-controls">\
        <div class="o-form-label-inline">\
          <span class="icon visibility-16"></span>\
          <span>{{i18n code="preview"}}</span>\
        </div>\
        <span class="input-fix o-form-control">\
          <input type="text" \
            placeholder="{{placeholder}}"/>\
        </span>\
      </div>\
    ',

    field: 'userId',

    initialize: function () {
      this.options.field && (this.field = this.options.field);
      _.bindAll(this, 'resetPicker', 'clearPicker');
      /*
       * Bloodhound, the typeahead.js suggestion engine
       * https://github.com/twitter/typeahead.js/blob/master/doc/bloodhound.md
       */
      this.source = new Bloodhound({
        remote: {
          url: '/api/v1/users?q=%QUERY&limit=10&expand=stats',
          filter: function (users) {
            return _.map(users, function (user) {
              return {
                id: user.id,
                name: user.profile.firstName + ' ' + user.profile.lastName,
                email: user.profile.email
              };
            });
          }
        },
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace
      });
      this.source.initialize();
    },

    render: function () {
      BaseView.prototype.render.apply(this, arguments);
      this.typeahead = this.$('input').typeahead({
        hint: true,
        highlight: true
      }, {
        displayKey: 'name',
        source: this.source.ttAdapter(),
        templates: {
          suggestion: suggestionTemplate,
          empty: emptyTemplate
        }
      });

      this.typeahead.on('typeahead:selected typeahead:autocompleted', _.bind(this.onSelect, this));
      return this;
    },

    /**
     * Insert "placeholder" value from view options to data for rendering view.
     * @override
     */
    getTemplateData: function () {

      var data = BaseView.prototype.getTemplateData.apply(this, arguments);
      _.defaults(data, {placeholder: this.options.placeholder || '' });

      return data;
    },


    addCloseButton: function () {
      if (this.$('.cancel-16').length < 1) {
        var self = this,
            close = $('<a href="#" class="icon-16 icon-only cancel-16"></a>').click(self.clearPicker);
        this.$('input.tt-input').after(close);
      }
    },

    clearPicker: function (focus) {
      if (_.isFunction(focus.preventDefault)) {
        focus.preventDefault();
        focus.stopPropagation();
      }
      _.isBoolean(focus) || (focus = true); // foucs on the input by default
      this.$('input').typeahead('val', ''); // clear input value
      focus && this.$('input.tt-input').focus();
      this.$('.cancel-16').remove(); // remove close button if it exists
      this.trigger('onClear');
    },

    resetPicker: function () {
      this.clearPicker(false);
      this.model && this.model.unset(this.field);
    },

    onSelect: function (e, data) {
      this.model && this.model.set(this.field, data.id);
      this.addCloseButton();
      $(this).typeahead('close');
      this.trigger('onSelect', {userId: data.id});
    }
  });
});
