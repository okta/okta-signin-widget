/* eslint max-params: [2, 8] */
define([
  'jquery',
  'underscore',
  'shared/util/TemplateUtil',
  'shared/models/BaseCollection',
  'shared/models/BaseModel',
  'shared/models/User',
  'shared/util/GroupPushStatus'
],
function ($, _, TemplateUtil, BaseCollection, BaseModel, User, GroupPushStatus) {

  function getDiff(model) {
    var src = model.previousAttributes(), target = {};
    _(model.toJSON()).each(function (value, key) {
      value === src[key] || (target[key] = value);
    });
    return target;
  }

  var GroupMapping = BaseModel.extend({
    idAttribute: 'mappingId',

    defaults: {
      'status': GroupPushStatus.ACTIVE,
      'ui_status': BaseModel.ComputedProperty(['status', 'currentJobDetails'], function () {
        return !this.get('currentJobDetails') ? this.get('status') : GroupPushStatus.PENDING;
      }),
      'deleteable': BaseModel.ComputedProperty(['status'], function () {
        return _.indexOf(this.get('selectableStatuses') || [], 'DELETED') > -1;
      })
    },

    /* eslint complexity: [2, 6] */
    sync: function (method, model, options) {
      switch (method) {
      case 'update':
        var attrs = getDiff(this);
        if (attrs.action) {
          method = 'create'; // force 'POST'
        }
        options.attrs = attrs;
        break;
      case 'delete':
        method = 'create'; // force 'POST'
        options = options || {};
        options.url = model.url() + '/delete'; // force custom URI (bad)
        options.attrs || (options.attrs = {});
        options.attrs.deleteAppGroup = !!options.deleteAppGroup;
        break;
      }
      return BaseModel.prototype.sync.call(this, method, model, options);
    },
    parse: function (data) {
      this.createdBy || (this.createdBy = new User.Model());
      this.createdBy.set(data.createdBy);
      delete data.createdBy;
      return data;
    }
  });

  var GroupMappings = BaseCollection.extend({
    model: GroupMapping,
    initialize: function (models, options) {
      this.options = _.clone(options || {});
      if (!this.options.instanceId) {
        throw new Error('Missing Arguments');
      }
      this.instanceId = this.options['instanceId'];
    },
    url: function () {
      return TemplateUtil.tpl('/api/internal/instance/{{instanceId}}/grouppush')(this.options);
    },
    parse: function (payload) {
      this.setPagination(payload.nextMappingsPageUrl);
      return payload.mappings;
    },
    bulkRetry: function () {
      return $.post(this.url() + '/bulkretryerror');
    }
  });

  return {
    Model: GroupMapping,
    Collection: GroupMappings
  };

});
