/* eslint max-params: 0 */
define([
  'underscore',
  'shared/util/TemplateUtil',
  'shared/models/BaseCollection',
  'shared/models/BaseModel',
  'shared/util/UrlExpander',
  'shared/util/UserStatus',
  'shared/util/Util'
], function (_, TemplateUtil, BaseCollection, BaseModel, UrlExpander, UserStatus, Util) {

  var url = TemplateUtil.tpl('/api/v1/apps/{{instanceId}}/users{{{urlQuery}}}');

  /**
   * @class AppUser
   *
   * App user(s) for a specific app instance
   */
  // TODO: convert Okta.BaseModel to Okta.Model OKTA-65258
  var AppUser = BaseModel.extend({

    defaults: {
      credentials: {},
      userName: BaseModel.ComputedProperty(['credentials'], function (credentials) {
        return credentials && credentials.userName;
      }),
      groupManaged: BaseModel.ComputedProperty(['scope'], function (scope) {
        return scope == 'GROUP';
      }),
      groupId: BaseModel.ComputedProperty(['_links'], function (links) {
        if (links && links.group && _.isString(links.group.href)) {
          return links.group.href.split('/').pop();
        } else {
          return null;
        }
      }),
      groupName: BaseModel.ComputedProperty(['_links'], function (links) {
        return links && links.group && links.group.name;
      }),
      '__metadata__': BaseModel.ComputedProperty(['_embedded'], function (embedded) {
        return embedded && _.isArray(embedded.metadata) ? embedded.metadata : [];
      }),

      '__oktaUser__': BaseModel.ComputedProperty(['_embedded'], function (expandedData) {
        return expandedData && expandedData.user || {};
      }),

      '__oktaStatus__': BaseModel.ComputedProperty(['__oktaUser__'], function (user) {
        return user && user.status;
      }),

      '__oktaStatusLabel__': BaseModel.ComputedProperty(['__oktaStatus__'], function (status) {
        return UserStatus.getLabel(status);
      }),

      '__oktaFirstName__': BaseModel.ComputedProperty(['__oktaUser__'], function (user) {
        return user && user.profile && user.profile.firstName;
      }),

      '__oktaLastName__': BaseModel.ComputedProperty(['__oktaUser__'], function (user) {
        return user && user.profile && user.profile.lastName;
      }),

      '__oktaUserName__': BaseModel.ComputedProperty(['__oktaUser__'], function (user) {
        return user && user.profile && user.profile.login;
      }),

      '__displayUserName__': BaseModel.ComputedProperty(
        ['__oktaUserName__', '__oktaFirstName__', '__oktaLastName__', 'userName'],
        function (oktaUserName, oktaFirstName, oktaLastName, appUserName) {

          if (oktaFirstName && oktaLastName) {
            return oktaFirstName + ' ' + oktaLastName;
          } else if (oktaUserName) {
            return oktaUserName;
          } else {
            return appUserName;
          }

        }),
      '__isNew__': true
    },

    parse: function (resp) {
      resp.credentials || (resp.credentials = {});
      if (this.profile) {
        this.profile.set('userName', resp['credentials'].userName);
        this.profile.set(resp.profile);
      }

      var links = resp['_links'];

      if (links && links.app && _.isString(links.app.href)) {
        resp['__instanceId__'] = links.app.href.split('/').pop();
      }

      resp['__isNew__'] = false;
      return BaseModel.prototype.parse.apply(this, arguments);
    },

    constructor: function (attrs) {
      attrs || (attrs = {});
      attrs.credentials || (attrs.credentials = {});
      this.profile = new BaseModel();
      BaseModel.apply(this, arguments);
    },

    initialize: function (attrs, options) {
      attrs || (attrs = {});
      options || (options = {});
      this.set('__instanceId__', attrs['__instanceId__'] || options['__instanceId__']);
      if (!this.get('__instanceId__')) {
        throw 'Cannot initialize AppUser without an instance id';
      }
    },

    urlRoot: function () {
      return url({instanceId: this.get('__instanceId__')});
    },

    isNew: function () {
      return this.get('__isNew__');
    },

    // both create and update use 'POST'
    sync: function (method, model, options) {
      if (method === 'update') {
        options.method = 'POST';
      }
      return BaseModel.prototype.sync.call(this, method, model, options);
    }

  });

  var AppUsers = BaseCollection.extend({
    model: AppUser,
    initialize: function (models, options) {
      options || (options = {});
      this['__instanceId__'] = options['__instanceId__'];
      if (!this['__instanceId__']) {
        throw 'Cannot initialize AppUsers without an instance id';
      }
      this.expander = new UrlExpander(options.expand);
    },

    url: function () {
      return url({
        instanceId: this['__instanceId__'],
        urlQuery: Util.getUrlQueryString({expand: this.expander.toString() || undefined})
      });
    }
  });

  return {
    Model: AppUser,
    Collection: AppUsers,
    EXPAND: {
      USER: 'user',
      METADATA: 'metadata'
    }
  };

});
