define([
  'underscore',
  'shared/util/TemplateUtil',
  'shared/models/Model',
  'shared/models/BaseCollection'
], function (_, TemplateUtil, Model, BaseCollection) {

  var DIRECTORY_NAMES = ['active_directory', 'ldap_sun_one'];

  /**
   * @class UserApp.Model
   * @extends {Okta.Model}
   * An app instance assigned/unassigned to a user
   */
  var UserAppInstance = Model.extend({
    flat: false,

    props: {
      'id': ['string', true],
      '_links': 'string',
      'accessibility': 'object',
      'created': 'string',
      'credentials': 'object',
      'features': 'array',
      'label': 'string',
      'lastUpdated': 'string',
      'licensing': 'object',
      'name': 'string',
      'settings': 'object',
      'signOnMode': 'string',
      'status': 'string',
      'visibility': 'object'
    },

    local: {
        // is used to track if an unassigned app became assigned,
        // or an assigned app became unassigned,
        // during the lifetime of the page (when api refetches, the app will not be included if the value is changed)
      '__isAssigned__': 'boolean'
    },

    derived: {
      '__logoUrl__': {
        deps: ['_links'],
        fn: function (links) {
          try {
            return links.logo[0].href;
          } catch (e) {
            return null;
          }
        }
      },
      '__scheme__': {
        deps: ['credentials'],
        fn: function (credentials) {
          try {
            return credentials.scheme;
          } catch (e) {
            return null;
          }
        }
      }
    }
  });

  /**
   * @class UserApp.Collection
   * @extends {Okta.Collection}
   * App instance assigned/unassigned to a user
   */
  var UserAppInstances = BaseCollection.extend({
    model: UserAppInstance,

    appOrigin: 'user',

    initialize: function (models, userId, options) {
      options || (options = {});
      this['__userId__'] = userId;
      if (!this['__userId__']) {
        throw 'Cannot initialize User/GroupApp.Collection without an user/group id';
      }
      if (!_.contains(['user', 'group'], this.appOrigin)) {
        throw 'appOrigin has to be \'user\' or \'group\' to initialize User/GroupApp.Collection';
      }
      var appStatus = options['appStatus'];
      this['__appStatus__'] = appStatus === 'catalog' ? appStatus : undefined;
    },

    parse: function (resp) {
      var self = this;
      resp = _.reject(resp, function (instance) {
        return instance['status'] === 'INACTIVE' || // inactive apps
          _.contains(DIRECTORY_NAMES, instance['name']); // hide directory apps until OU widget is supported
      });
      resp = _.map(resp, function (instance) {
        instance['__isAssigned__'] = self['__appStatus__'] !== 'catalog';
        return instance;
      });
      return resp;
    },

    url: function () {
      var urlTemplate =
        TemplateUtil.tpl('/api/v1/{{appOrigin}}s/{{__userId__}}/{{#if __appStatus__}}{{__appStatus__}}/{{/if}}apps');
      return urlTemplate(this);
    }
  });

  return {
    Model: UserAppInstance,
    Collection: UserAppInstances
  };
});
