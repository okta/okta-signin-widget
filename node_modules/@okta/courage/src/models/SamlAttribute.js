define([
  'underscore',
  'shared/models/BaseModel',
  'shared/models/BaseCollection'
],
function (_, BaseModel, BaseCollection) {
  var SamlAttribute = {};

  var BaseSamlAttribute = BaseModel.extend({
    defaults: function () {
      return {
        name: '',
        namespace: ''
      };
    }
  });

  SamlAttribute.Generic = BaseSamlAttribute.extend({
    defaults: _.extend(BaseSamlAttribute.prototype.defaults(), {
      values: [],
      type: 'GENERIC'
    })
  });

  SamlAttribute.Group = BaseSamlAttribute.extend({
    defaults: _.extend(BaseSamlAttribute.prototype.defaults(), {
      /* Do not initialize filterType and filterValue; they're filled in by the view when needed */
      type: 'GROUP'
    })
  });

  var SamlAttributesByType = BaseCollection.extend({
    model: function (attrs, options) {
      var AttributeModel = _.find(SamlAttribute, function (m) {
        return _.result(m.prototype, 'defaults').type == attrs.type;
      });
      return new AttributeModel(attrs, options);
    }
  });

  var SamlAttributes = BaseModel.extend({
    defaults: function () {
      return {
        GENERIC: new SamlAttributesByType(),
        GROUP: new SamlAttributesByType()
      };
    },

    parse: function (resp) {
      var attributesByType = _.groupBy(resp, 'type');
      for (var type in attributesByType) {
        if (attributesByType.hasOwnProperty(type)) {
          attributesByType[type] = new SamlAttributesByType(attributesByType[type]);
        }
      }
      return attributesByType;
    },

    toJSON: function () {
      var json = BaseModel.prototype.toJSON.call(this);
      for (var type in json) {
        if (json.hasOwnProperty(type)) {
          json[type] = json[type].toJSON();
        }
      }
      return _.flatten(_.map(json, _.values));
    }
  });

  return {
    Model: SamlAttribute,
    Collection: SamlAttributes
  };
});
