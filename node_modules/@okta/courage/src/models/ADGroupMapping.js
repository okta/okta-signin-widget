define([
  'underscore',
  'shared/models/BaseModel',
  'shared/models/User',
  'shared/util/GroupPushStatus',
  'shared/models/GroupMapping'
],
function (_, BaseModel, User, GroupPushStatus, GroupMapping) {
  function getDiff(model) {
    var src = model.previousAttributes(), target = {};
    _(model.toJSON()).each(function (value, key) {
      value === src[key] || (target[key] = value);
    });
    return target;
  }

  var ADGroupMapping = GroupMapping.Model.extend({
    idAttribute: 'mappingId',
    groupScope: 'GLOBAL',
    defaults: {
      'status': GroupPushStatus.ACTIVE,
      'ui_status': BaseModel.ComputedProperty(['status', 'currentJobDetails'], function () {
        return !this.get('currentJobDetails') ? this.get('status') : GroupPushStatus.PENDING;
      }),
      'groupScope': 'GLOBAL',
      'groupType': 'SECURITY',
      'distinguishedName': '',
      'samAccountName': '',
      'groupName': '',
      'deleteable': BaseModel.ComputedProperty(['status'], function () {
        return _.indexOf(this.get('selectableStatuses') || [], 'DELETED') > -1;
      })
    },

    sync: function (method, model, options) {
      switch (method) {
      case 'update':
        var attrs = getDiff(this);
        if (attrs.action) {
          method = 'create'; // force 'POST'
        }
        options.attrs = attrs;
        break;
      case 'delete':
        method = 'create'; // force 'POST'
        options = options || {};
        options.url = model.url() + '/delete'; // force custom URI (bad)
        options.attrs || (options.attrs = {});
        options.attrs.deleteAppGroup = !!options.deleteAppGroup;
        break;
      }


      model.set('groupPushAttributes', { 'groupScope': model.get('groupScope'),
                                         'groupType': model.get('groupType'),
                                         'distinguishedName': model.get('distinguishedName'),
                                         'samAccountName': model.get('samAccountName')
                                       });

      model.unset('samAccountName');
      model.unset('distinguishedName');
      model.unset('groupType');
      model.unset('groupScope');
      model.unset('groupName');
      return BaseModel.prototype.sync.call(this, method, model, options);
    },

    parse: function (data) {
      _.extend(data, data.groupPushAttributes, {status: data.status});
      this.createdBy || (this.createdBy = new User.Model());
      this.createdBy.set(data.createdBy);
      delete data.createdBy;
      delete data.groupPushAttributes;
      return data;
    }

  });

  var ADGroupMappings = GroupMapping.Collection.extend({
    model: ADGroupMapping
  });

  return {
    Model: ADGroupMapping,
    Collection: ADGroupMappings
  };

});
