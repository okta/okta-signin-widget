define([
  'underscore',
  'shared/models/Model'
], function (
  _,
  Model
) {
  var ScimProperties = Model.extend({
    props: {
      id: 'string',
      scimVersion: ['string', true, '2.0'],
      baseUrl: ['string', true],
      uniqueFieldName: ['string', true, 'userName'],
      authNodes: ['array', true, [ { type: 'OAUTH2' } ]],
      scimServerConfig: ['object', true, {
        patch: true,
        filter: true,
        changePassword: false
      }],
      profiles: ['object', true]
    },

    local: {
      authNodeType: ['string', true, 'OAUTH2'],
      authNodeHeaderValueExpression: 'string',
      scimServerConfigPatch: ['bool', true, true],
      scimServerConfigFilter: ['bool', true, true],
      scimServerConfigChangePassword: ['bool', true, false],
      profilesString: ['string', true]
    },

    initialize: function () {
      this.listenTo(this,
        'change:scimServerConfigPatch change:scimServerConfigFilter change:scimServerConfigChangePassword',
        this.updateScimServerConfig);
      this.listenTo(this, 'change:scimServerConfig', function () {
        this.updateScimServerConfigLocalProps();
      });

      this.listenTo(this, 'change:authNodeType change:authNodeHeaderValueExpression', this.updateAuthNodes);
      this.listenTo(this, 'change:authNodes', this.updateAuthNodeLocalProps);

      this.listenTo(this, 'change:profilesString', this.updateProfiles);
      this.listenTo(this, 'change:profiles', this.updateProfilesString);

      this.updateScimServerConfigLocalProps();
      this.updateAuthNodeLocalProps();
      this.updateProfilesString();
    },

    updateScimServerConfig: function () {
      var config = {
        patch: this.get('scimServerConfigPatch'),
        filter: this.get('scimServerConfigFilter'),
        changePassword: this.get('scimServerConfigChangePassword')
      };
      this.set('scimServerConfig', config);
    },

    updateScimServerConfigLocalProps: function () {
      var config = this.get('scimServerConfig');
      if (!config || (config && typeof config != 'object')) {
        config = {};
      }

      if (_.has(config, 'patch')) {
        this.set('scimServerConfigPatch', config.patch);
      }
      if (_.has(config, 'filter')) {
        this.set('scimServerConfigFilter', config.filter);
      }
      if (_.has(config, 'changePassword')) {
        this.set('scimServerConfigChangePassword', config.changePassword);
      }
    },

    updateAuthNodes: function () {
      var authNodes = [];
      var authNodeType = this.get('authNodeType');
      var authNodeHeaderValueExpression = this.get('authNodeHeaderValueExpression');

      var nodeItem = {};
      switch (authNodeType) {
      case 'HEADER':
        nodeItem.type = 'HEADER';
        nodeItem.headerValueExpression = authNodeHeaderValueExpression;
        break;
      case 'BASIC':
        nodeItem.type = 'BASIC';
        break;
      default:
        nodeItem.type = 'OAUTH2';
        break;
      }
      authNodes.push(nodeItem);

      this.set('authNodes', authNodes);
    },

    /* eslint complexity: [2, 8], max-depth: [2, 3] */
    updateAuthNodeLocalProps: function () {
      var authNodes = this.get('authNodes');
      if (!authNodes || (authNodes && typeof authNodes != 'object')) {
        authNodes = [];
      }

      if (authNodes[0]) {
        var nodeItem = authNodes[0];
        if (nodeItem.type) {
          switch (nodeItem.type) {
          case 'HEADER':
            this.set('authNodeType', 'HEADER');
            this.set('authNodeHeaderValueExpression', nodeItem.headerValueExpression || '');
            break;
          case 'BASIC':
            this.set('authNodeType', 'BASIC');
            break;
          default:
            this.set('authNodeType', 'OAUTH2');
            break;
          }
        }
      }
    },

    updateProfiles: function () {
      if (this.ignoreProfilesChangeEvent) {
        this.ignoreProfilesChangeEvent = false;
      }
      else {
        var profilesString = this.get('profilesString');
        var profilesObj;

        try {
          profilesObj = JSON.parse(profilesString);
        }
        catch (error) {
          profilesObj = profilesString;
        }

        this.ignoreProfilesChangeEvent = true;
        this.set('profiles', profilesObj);
      }
    },

    updateProfilesString: function () {
      if (this.ignoreProfilesChangeEvent) {
        this.ignoreProfilesChangeEvent = false;
      }
      else {
        var profilesObj = this.get('profiles');
        var profilesString = JSON.stringify(profilesObj, null, 2);

        if (this.get('profilesString') !== profilesObj) {
          this.ignoreProfilesChangeEvent = true;
        }
        this.set('profilesString', profilesString);
      }
    }
  });

  return {
    Model: ScimProperties
  };
});
