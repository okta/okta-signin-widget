define(['jquery',
        'underscore',
        'shared/models/BaseModel',
        'shared/models/AppLink'],
  function ($, _, BaseModel, AppLink) {

    var App = BaseModel.extend({

      // Overrides get/set to account for non-flat App model. This is
      // necessary for properties like appLink. In the
      // future, these might go into their own collections/models and then
      // we can remove this logic

      get: function (attr) {
        var tokens, val;
        tokens = attr.split('.');
        val = BaseModel.prototype.get.call(this, tokens.shift());
        if (tokens.length > 0) {
          _.each(tokens, function (key) {
            if (!_.isUndefined(val)) {
              val = val[key];
            }
          });
        }
        return val;
      },

      /* eslint max-statements: [2, 14], max-depth: [2, 4] */
      set: function (key, val, options) {
        var tokens, clone, obj, part;

        // Doesn't support key that is a key/val hash
        if (typeof key !== 'object') {
          tokens = key.split('.');
          if (tokens.length > 1) {
            key = tokens.shift();
            obj = clone = $.extend(true, {}, this.get(key));
            while ((part = tokens.shift()) !== undefined) {
              if (!obj[part]) { obj[part] = {}; }
              if (tokens.length === 0) { obj[part] = val; }
              obj = obj[part];
            }
            val = clone;
          }
        }
        return BaseModel.prototype.set.call(this, key, val, options);
      },

      defaults: function () {
        return {
          name: null,
          displayName: null,
          description: null,
          supportLevel: 'PROD',
          category: 'SYSTEM',
          isPrivate: false
        };
      },

      urlRoot: '/api/internal/apps',

      idAttribute: 'appId',

      parse: function (resp) {
        // Required for creating new Apps
        var linkArray = resp.appLinks || [{}];
        resp.appLinks = new AppLink.Collection(linkArray);

        return resp;
      },

      toJSON: function () {
        var json = BaseModel.prototype.toJSON.call(this);

        // Required when creating new Apps
        if (json.appLinks) {
          json.appLinks = json.appLinks.toJSON();
        }

        delete json.appId;
        return json;
      },

      sync: function (method, model, options) {
        if (options && options.createFromVersionId && options.createFromVersionId !== '') {
          options.url = _.result(this, 'url') + '?createFromVersionId=' + options.createFromVersionId;
        }
        return BaseModel.prototype.sync.call(this, method, model, options);
      }
    });

    return App;
  });

