define([
  'underscore',
  'shared/models/BaseModel',
  'shared/models/BaseCollection',
  'shared/util/ProfileMappingPushStatus'
], function (_, BaseModel, BaseCollection, ProfileMappingPushStatus) {

  var hasManagerAssistantExpression = function (expressionStr) {
    if (/get(Manager|Assistant)(App)*User(?=\()/.test(expressionStr)) {
      return true;
    }
    return false;
  };

  var ProfileMapping = BaseModel.extend({
    defaults: {
      targetField: undefined,
      sourceExpression: '',
      pushStatus: '',
      '__targetAttribute__': undefined
    },

    initialize: function () {
      this.listenTo(this, 'updatePushStatus', function (tabId, features) {
        // Clear the pushStatus if the sourceExpression input field becomes empty
        if (this.get('sourceExpression') === '') {
          this.set('pushStatus', null);
        }
        // When transitioning from empty to non-empty sourceExpression, this condition determines
        // which push status to default to
        else if (!this.get('pushStatus')) {
          if (tabId === 'appToOkta') {
            this.set('pushStatus', _.contains(features, 'PROFILE_MASTERING') ?
                    ProfileMappingPushStatus.PUSH : ProfileMappingPushStatus.DONT_PUSH);
          }
          //oktaToApp tab
          else {
            this.set('pushStatus', _.contains(features, 'PUSH_PROFILE_UPDATES') ?
                    ProfileMappingPushStatus.PUSH : ProfileMappingPushStatus.DONT_PUSH);
          }
        }
      });
    }
  });

  var ProfilesMapping = BaseCollection.extend({
    model: ProfileMapping,
    toJSON: function () {
      var json = BaseCollection.prototype.toJSON.apply(this, arguments);
      return _.filter(json, function (mappingObj) {
        return mappingObj.pushStatus && mappingObj.sourceExpression;
      });
    }
  });

  var SourceTargetMapping = BaseModel.extend({

    defaults: {
      sourceId: undefined,
      targetId: undefined,
      propertyMappings: new ProfilesMapping()
    },

    url: '/api/internal/v1/mappings',

    parse: function (resp) {
      // (T___T)
      // GET api returns array
      if (_.isArray(resp)) {
        resp[0].propertyMappings = new ProfilesMapping(resp[0].propertyMappings || []);
        return resp[0];
      } else {
        // PUT api returns an object
        resp.propertyMappings = new ProfilesMapping(resp.propertyMappings || []);
        return resp;
      }
    },

    sync: function (method, model, options) {
      if (method === 'create') {
        options.method = 'PUT';
      }
      return BaseModel.prototype.sync.call(this, method, model, options);
    },

    toJSON: function () {
      var json = BaseModel.prototype.toJSON.apply(this, arguments);
      json.propertyMappings =
        (_.isArray(json.propertyMappings)) ? json.propertyMappings : json.propertyMappings.toJSON();
      return json;
    },

    isSynced: function () {
      var synced = this._getSynced(),
          current = this.toJSON();
      if (synced && current && synced.sourceId === current.sourceId && synced.targetId === current.targetId) {
        if (synced.propertyMappings.length !== current.propertyMappings.length) {
          return false;
        } else {
          _.each(synced.propertyMappings, function (mapping) {
            var match = _.findWhere(current.propertyMappings, mapping);
            if (match !== undefined) {
              current.propertyMappings = _.without(current.propertyMappings, match);
            }
          });
          return current.propertyMappings.length === 0;
        }
      }
      return false;
    },

    hasManagerAssistantInMapping: function () {
      var propertyMappings = this.toJSON().propertyMappings,
          res = false,
          propertyMappingsCount = propertyMappings.length,
          i = 0;
      while (!res && (i < propertyMappingsCount)) {
        res = hasManagerAssistantExpression(propertyMappings[i].sourceExpression);
        i++;
      }
      return res;
    }

  });

  return {
    Model: SourceTargetMapping,
    ProfileMappingModel: ProfileMapping,
    ProfileMappingCollection: ProfilesMapping
  };
});
