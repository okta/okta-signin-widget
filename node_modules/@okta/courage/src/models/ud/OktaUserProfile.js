/* eslint max-params: [2, 7] */
define([
  'underscore',
  'shared/util/TemplateUtil',
  'shared/util/StringUtil',
  'shared/models/BaseUserProfile',
  'shared/models/AppInstance',
  'shared/util/Util',
  'shared/util/URLs'
], function (_, TemplateUtil, StringUtil, BaseUserProfile, AppInstance, Util, URLs) {

  var template = TemplateUtil.tpl;

  var profileUrl = template('/api/v1/user/types/{{id}}{{{urlQuery}}}'),
      baseUrl = template('/api/v1/user/types{{{urlQuery}}}');

  var OktaUserProfile = BaseUserProfile.Model.extend({
    defaults: _.extend({}, BaseUserProfile.Model.prototype.defaults, {
      '__appType__': 'user', // refers to user profiles
      '__profileMasters__': function () {
        var profileMasterApps = new AppInstance.Collection();
        if (this.get('_embedded') && this.get('_embedded').profileMasters) {
          _.each(this.get('_embedded').profileMasters, function (profileMaster) {
            profileMasterApps.add(profileMaster, {parse: true});
          });
        }
        return profileMasterApps;
      },
      '__appLogoUrl__': URLs.OKTA_DEFAULT_LOGO_RESOURCE,
      '__appInstanceDisplayName__': StringUtil.localize('okta')
    }),

    url: function () {
      return profileUrl({
        id: this.get('id'),
        urlQuery: Util.getUrlQueryString({expand: this.get('expandQuery') || undefined, userId: this.get('userId')})
      });
    }
  });

  var OktaUserProfiles = BaseUserProfile.Collection.extend({
    model: OktaUserProfile,

    url: function () {
      return baseUrl({urlQuery: Util.getUrlQueryString({expand: this.expander.toString() || undefined})});
    },

    updateDefault: function (newDefault) {
      var defaults = this.where({isDefault: true});
      _.each(defaults, function (model) {
        if (model.id != newDefault.id) {
          model.set({'isDefault': false});
        }
      });
    }
  });

  return {
    Model: OktaUserProfile,
    Collection: OktaUserProfiles
  };

});
