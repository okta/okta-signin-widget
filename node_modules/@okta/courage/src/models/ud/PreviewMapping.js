define([
  'underscore',
  'shared/util/TemplateUtil',
  'shared/models/Model',
  'shared/util/SchemaUtil'
], function (_, TemplateUtil, Model, SchemaUtil) {

  var getDisplayType = function (displayType) {
    return SchemaUtil.DATATYPE[displayType] || displayType;
  };

  var baseURL = TemplateUtil.tpl('/api/internal/v1/mappings/preview?includeAllTargetFields={{includeAllTargetFields}}');

  return Model.extend({

    url: function () {
      return baseURL(this.pick('includeAllTargetFields'));
    },

    props: {
      sourceId: {
        type: 'string',
        required: true
      },
      targetId: {
        type: 'string',
        required: true
      },
      userId: {
        type: 'string',
        required: true
      },
      propertyMappings: {
        type: 'array',
        required: true
      }
    },

    local: {
      includeAllTargetFields: {
        type: 'boolean',
        value: true
      }
    },

    parse: function (resp) {
      _.each(resp.propertyMappings, function (mapping) {
        // sourceExpression is undefined for
        // - un-mapped attribute
        // - mapping target is username and its value is defined in the app (default)
        if (mapping.sourceExpression) {
          mapping['__displaySourceType__'] = SchemaUtil.getDisplayType(
            mapping.sourceExpressionType,
            mapping.sourceExpressionFormat,
            mapping.sourceExpressionItems ? mapping.sourceExpressionItems.type : undefined,
            'fx'
          );
          mapping['__displaySourceTypeLabel__'] = getDisplayType(mapping['__displaySourceType__']);
        }
        var targetType = mapping.targetFieldType;
        // targetType is undefined if there's error in the mapping,
        // UI does not display the target type for this case
        // no need to compose the value
        if (targetType) {
          mapping['__displayTargetType__'] = SchemaUtil.getDisplayType(
            targetType,
            mapping.targetFieldFormat,
            mapping.targetFieldItems ? mapping.targetFieldItems.type : undefined
          );
          mapping['__displayTargetTypeLabel__'] = getDisplayType(mapping['__displayTargetType__']);
        }
        var mappingOutput = mapping.value || null;
        mapping['__displayValue__'] = JSON.stringify(mappingOutput);
      });
      return resp;
    }
  });

});
