/* eslint max-params: [2, 7] */
define([
  'underscore',
  'jquery',
  'shared/models/BaseUserProfile',
  'shared/util/StringUtil',
  'shared/util/TemplateUtil',
  'shared/util/Util',
  'shared/util/URLs'
], function (_, $, BaseUserProfile, StringUtil, TemplateUtil, Util, URLs) {

  var template = TemplateUtil.tpl;

  var baseUrl = template('/api/v1/apps/user/types{{{urlQuery}}}'),
      profilesUrl = template('/api/v1/apps/{{instanceId}}/user/types{{{urlQuery}}}'),
      profileUrl = template('/api/v1/apps/{{instanceId}}/user/types/{{id}}{{{urlQuery}}}'),
      defaultProfileUrl = template('/api/v1/apps/user/types/{{id}}{{{urlQuery}}}'),
      appUserProfileForAppUrl = template('/api/v1/internal/apps/{{appname}}/user/types/{{{urlQuery}}}');

  var AppUserProfile = BaseUserProfile.Model.extend({
    defaults: _.extend({userId: undefined}, BaseUserProfile.Model.prototype.defaults, {
      instanceId: BaseUserProfile.Model.ComputedProperty(['_links'], function (links) {
        if (this.instanceId) {
          return this.instanceId;
        }
        if (links && links.app && _.isString(links.app.href)) {
          return links.app.href.split('/').pop();
        }
        return '';
      }),
      // when query expand=app, _embedded.app.name tells this is an active directory app, identity provider
      // or regular app
      '__appType__': BaseUserProfile.Model.ComputedProperty(['_embedded'], function (expandedData) {
        if (expandedData && expandedData.app) {
          if (_.contains(['active_directory', 'ldap_sun_one'], expandedData.app.name)) {
            return 'directory';
          } else if (StringUtil.endsWith(expandedData.app.name, '_idp')) {
            return 'idp';
          } else {
            return 'app';
          }
        }
      }),
      '__appInstanceId__': BaseUserProfile.Model.ComputedProperty(['_embedded'], function (expandedData) {
        return expandedData && expandedData.app && expandedData.app.id;
      }),
      '__appConfigUrl__': BaseUserProfile.Model.ComputedProperty(['_embedded'], function (expandedData) {
        return expandedData && expandedData.app &&
          URLs.getAppConfigResource(expandedData.app.name, expandedData.app.id);
      }),
      '__appLogoUrl__': BaseUserProfile.Model.ComputedProperty(['_embedded'], function (expandedData) {
        return  expandedData && expandedData.appLogo ? expandedData.appLogo.href : '/img/logos/default.png';
      }),
      '__appInstanceDisplayName__': BaseUserProfile.Model.ComputedProperty(['_embedded'], function (expandedData) {
        return expandedData && expandedData.app && expandedData.app.label;
      }),
      '__appName__': BaseUserProfile.Model.ComputedProperty(['_embedded'], function (expandedData) {
        return expandedData && expandedData.app && expandedData.app.name;
      })
    }),

    /**
     * Returns the url for the AppUserProfile, falling back to the default AppUserProfile
     * if the AppInstance isn't created yet.
     */
    url: function () {
      if (this.get('instanceId')) {
        return profileUrl({
          id: this.get('id'),
          instanceId: this.get('instanceId'),
          urlQuery: Util.getUrlQueryString({expand: this.get('expandQuery') || undefined, userId: this.get('userId')})
        });
      } else if (this.get('appname')) {
        return appUserProfileForAppUrl({
          appname: this.get('appname'),
          urlQuery: Util.getUrlQueryString({expand: this.get('expandQuery') || undefined})
        });
      } else {
        return defaultProfileUrl({
          id: this.get('id'),
          urlQuery: Util.getUrlQueryString({expand: this.get('expandQuery') || undefined})
        });
      }
    },

    hasAppFeature: function (appFeature) {
      var embed = this.get('_embedded');
      if (embed && embed.app && embed.app.features) {
        return $.inArray(appFeature, embed.app.features) !== -1;
      }
      return false;
    }

  });

  var AppUserProfiles = BaseUserProfile.Collection.extend({

    model: AppUserProfile,

    initialize: function (models, options) {
      options || (options = {});
      BaseUserProfile.Collection.prototype.initialize.call(this, models, options);
      this.instanceId = options.instanceId;
    },

    url: function () {
      var instanceId = this.getInstanceId(),
          urlQuery = Util.getUrlQueryString({expand: this.expander.toString() || undefined});
      if (instanceId) {
        return profilesUrl({instanceId: instanceId, urlQuery: urlQuery});
      }
      return baseUrl({urlQuery: urlQuery});
    },

    getInstanceId: function () {
      return this.instanceId;
    }

  });

  return {
    Model: AppUserProfile,
    Collection: AppUserProfiles
  };

});
