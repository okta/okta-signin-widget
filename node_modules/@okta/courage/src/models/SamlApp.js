/* eslint max-statements: [2, 14], complexity: [2, 6]*/
define([
  'underscore',
  'shared/util/StringUtil',
  'shared/models/BaseModel',
  'shared/models/SamlAttribute',
  'vendor/lib/json2'
],

  function (_, StringUtil, BaseModel, SamlAttribute) {

    var loc = StringUtil.localize;

    var SamlApp = BaseModel.extend({
      defaults: function () {
        return {
          displayName: '',
          logoImageId: '',
          hideAppIcon: false,
          hideIniOS: false,
          postBackURL: '',
          '__useForRecipAndDest__': true,
          recipient: '',
          destination: '',
          audienceRestriction: '',
          defaultRelayState: '',
          nameIdFormat: '',
          autofillSetting: 'global.assign.userName.login',
          customRule: null,
          '__showAdvanced__': false,
          responseSigned: true,
          assertionSigned: true,
          requestCompressed: false,
          authnContextClassRef: '',
          signatureAlgorithm: '',
          digestAlgorithm: '',
          assertionEncrypted: false,
          encryptionAlgorithm: '',
          keyTransportAlgorithm: '',
          certificateId: '',
          certificateFilename: '',
          certificatePrincipal: '',
          forceAuthn: true,
          attributes: new SamlAttribute.Collection(),
          '__step__': null,
          '__mode__': 'create',
          '__instanceId__': null,
          '__appName__': null
        };
      },

      parse: function (resp) {
        if (resp.postBackURL !== resp.recipient || resp.postBackURL !== resp.destination) {
          resp['__useForRecipAndDest__'] = false;
        }

        if (resp.appInstanceId) {
          resp['__instanceId__']  = resp.appInstanceId;
          delete resp.appInstanceId;
        }

        if (resp.appName) {
          resp['__appName__']  = resp.appName;
          delete resp.appName;
        }

        // Convert the attributes to a collection
        if (resp.attributes) {
          resp.attributes = new SamlAttribute.Collection(resp.attributes, {parse: true});
        }

        return resp;
      },

      toJSON: function () {
        // Filter out any saml attrs that have an empty name
        var json = BaseModel.prototype.toJSON.apply(this, arguments);
        json.attributes = _.filter(json.attributes.toJSON(), function (attr) {
          return attr.name !== '';
        });
        return json;
      },

      validate: function (attrs) {
        if (attrs['__step__'] === 1 && !attrs.displayName) {
          return {'displayName': loc('model.validation.field.blank')};
        }
        var maxLength = 100;
        if (attrs['__step__'] === 1 && attrs.displayName.length > maxLength) {
          return {'displayName': loc('model.validation.field.too.long', 'messages', [maxLength])};
        }
      },

      idAttribute: '__appName__',

      urlRoot: '/api/internal/orgadmin/apps/saml'
    });

    return SamlApp;
  });
