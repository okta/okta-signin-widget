define([
  'underscore',
  'shared/util/TemplateUtil',
  'shared/models/Model',
  'shared/models/BaseCollection',
  'shared/models/AppUser'
], function (_, TemplateUtil, Model, BaseCollection, AppUser) {

  var url = '/api/v1/apps',
      configUrl = TemplateUtil.tpl('/admin/app/{{name}}/instance/{{id}}');

  function isDirectoryApp(name) {
    return _.contains(['active_directory', 'ldap_sun_one'], name);
  }

  var AppInstance = Model.extend({

    flat: false,

    props: {
      'id'            : 'string',
      'name'          : 'string',
      'label'         : 'string',
      'status'        : 'string',
      'lastUpdated'   : 'date',
      'created'       : 'date',
      'accessibility' : 'object',
      'licensing'     : 'object',
      'visibility'    : 'object',
      'features'      : 'array',
      'signOnMode'    : 'string',
      'credentials'   : 'object',
      'settings'      : 'object',
      '_links'        : 'object',
      '_embedded'     : 'object'
    },

    local: {
      /**
       * '__selected__' and '__sortOrder__' are reference at following class
       * - /universal-directory/profiles/views/forms/inputs/SortableOrderedList.js
       */
      '__selected__': 'boolean',
      '__sortOrder__': 'number'
    },

    derived: {
      '__logoUrl__': {
        deps: ['_links'],
        fn: function (links) {
          var logos = links ? links.logo : [],
              firstLogo = _.first(logos);
          return firstLogo && firstLogo.href ? firstLogo.href : null;
        }
      },
      '__scheme__': {
        deps: ['credentials'],
        fn: function (credentials) {
          return credentials ? credentials.scheme : null;
        }
      },
      '__configUrl__': {
        deps: ['id', 'name'],
        fn: function (id, name) {
          return configUrl({name: name, id: id});
        }
      },
      '__active__': {
        deps: ['status'],
        fn: function (status) {
          return status === 'ACTIVE';
        }
      },
      '__provisionEnabled__': {
        deps: ['features'],
        fn: function (features) {
          // IMPORT_NEW_USERS is default feature once provisioning is enabled.
          return _.contains(features, 'IMPORT_NEW_USERS');
        }
      },
      '__createUserEnabled__': {
        deps: ['features'],
        fn: function (features) {
          return _.contains(features, 'PUSH_NEW_USERS');
        }
      },
      '__updateUserAttributesEnabled__': {
        deps: ['features'],
        fn: function (features) {
          return _.contains(features, 'PUSH_PROFILE_UPDATES');
        }
      },
      '__isDirectoryApp__': { // determine whether is AD or LDAP
        deps: ['name'],
        fn: isDirectoryApp
      },
      '__selfServiceEnabled__': {
        deps: ['accessibility'],
        fn: function (accessibility) {
          return accessibility && accessibility.selfService;
        }
      }
    },

    urlRoot: url,

    constructor: function (attributes) {
      this.embedded = {};
      this.embedded.appUser = new AppUser.Model(this._getAppUserAttrs(attributes), {parse: true});
      Model.apply(this, arguments);
    },

    parse: function (resp) {
      this.embedded.appUser.set(this.embedded.appUser.parse(this._getAppUserAttrs(resp)));

      return resp;
    },

    _getAppUserAttrs: function (attrs) {
      attrs = attrs || {};
      var embeddedAttrs = attrs['_embedded'] || {};
      return _.extend({'__instanceId__': attrs.id}, embeddedAttrs.user);
    },

    isSupportDiffReport: function (settings) {
      var isFeatureEnabled = settings && _.isFunction(settings.hasFeature) ?
            settings.hasFeature('APP_ASSIGNMENT_DIFF_REPORT') :
            false;

      return _.every([ isFeatureEnabled,
                       this.get('__provisionEnabled__'),
                       this.get('__active__'),
                       !this.get('__isDirectoryApp__')
                     ]);
    }

  });

  var AppInstances = BaseCollection.extend({
    model: AppInstance,
    url: url
  });

  return {
    isDirectoryApp: isDirectoryApp,
    Model: AppInstance,
    Collection: AppInstances
  };

});
