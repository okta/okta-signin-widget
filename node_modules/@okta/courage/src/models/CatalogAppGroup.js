define([
  'underscore',
  'shared/util/TemplateUtil',
  'shared/models/Model',
  'shared/models/BaseCollection'
],
function (_, TemplateUtil, Model, BaseCollection) {

  var url = TemplateUtil.tpl('/api/v1/apps/{{instanceId}}/catalog/groups{{#if groupId}}/{{groupId}}{{/if}}');

  var CatalogAppGroup = Model.extend({
    props: {
      'id': ['string', true],
      '_links.logo': 'array',
      '_links.users.href': 'string',
      '_links.apps.href': 'string',
      'objectClass': 'array',
      'profile.name': 'string',
      'profile.description': 'string',
      'type': 'string',
      'created': 'string',
      'lastUpdated': 'string',
      'lastMembershipUpdated': 'string'
    },

    local: {
      '__instanceId__': 'string',
      '__isAssigned__': ['boolean', false, false]
    },

    derived: {
      '__groupLogoUrl__': {
        deps: ['_links.logo'],
        fn: function (logoLinks) {
          if (_.isArray(logoLinks) && _.isObject(logoLinks[0]) && _.has(logoLinks[0], 'href')) {
            return logoLinks[0].href;
          } else {
            return '';
          }
        }
      }
    },

    url: function () {
      return url({instanceId: this.get('__instanceId__'), groupId: this.get('id')});
    },

    initialize: function (resp, options) {
      resp || (resp = {});
      options || (options = {});

      var instanceId = resp['__instanceId__'] || (options.collection && options.collection.instanceId);
      if (!instanceId) {
        throw 'Cannot initialize CatalogAppGroup without an instance id';
      }
      resp['__instanceId__'] = instanceId;

      if (!resp.id) {
        throw 'Cannot initialize CatalogAppGroup without an id (group id)';
      }

      Model.prototype.initialize.apply(this, arguments);
    }
  });

  var CatalogAppGroups = BaseCollection.extend({
    model: CatalogAppGroup,

    url: function () {
      return url({instanceId: this.instanceId});
    },

    initialize: function (models, options) {
      options || (options = {});
      this.instanceId = options.instanceId;
      if (!this.instanceId) {
        throw 'Cannot initialize CatalogAppGroups without an instance id';
      }
      BaseCollection.prototype.initialize.apply(this, arguments);
    },

    parse: function (resp) {
      _.each(resp, _.bind(function (catalogGroupObj, index) {
          // OKTA-64875
          // currently the API may return more than just name and description
          // which not intended
          // once the bug is fixed, the parse is not needed
        resp[index]['profile'] = _.pick(resp[index]['profile'], 'name', 'description');
      }, this)
      );
      return resp;
    }
  });

  /**
  * @class CatalogUser
  *
  * Catalog(unassigned) user(s) for a specific app instance
  */
  return {
    Model: CatalogAppGroup,
    Collection: CatalogAppGroups
  };
});
