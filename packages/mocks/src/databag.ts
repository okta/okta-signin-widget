import type { Databag } from '@okta/loginpage-render';

export const databag: Databag = {
  // point to server
  baseUrl: 'http://localhost:3030',

  featureFlags: [],
  orgLoginPageSettings: {
    customLinkOneText: 'mock-customLinkOneText',
    customLinkOneHref: 'mock-customLinkOneHref',
    customLinkTwoText: 'mock-customLinkTwoText',
    customLinkTwoHref: 'mock-customLinkTwoHref',
    factorPageCustomLinkText: 'mock-factorPageCustomLinkText',
    factorPageCustomLinkHref: 'mock-factorPageCustomLinkHref',
    oktaHelpHref: 'mock-oktaHelpHref',
    forgottenPasswordHref: 'mock-forgottenPasswordHref',
    unlockAccountHref: 'mock-unlockAccountHref',
    showPasswordVisibilityToggle: false,
    showIdentifier: false,
    usernameLabel: 'mock-usernameLabel',
    usernameInlineLabel: 'mock-usernameInlineLabel',
    passwordLabel: 'mock-passwordLabel',
    passwordInlineLabel: 'mock-passwordInlineLabel',
    signinLabel: 'mock-signinLabel',
    forgottenPasswordLabel: 'mock-forgottenPasswordLabel',
    unlockAccountLabel: 'mock-unlockAccountLabel',
    oktaHelpLabel: 'mock-oktaHelpLabel',
    footerHelpTitle: 'mock-footerHelpTitle',
    recoveryFlowPlaceholder: 'mock-recoveryFlowPlaceholder',
  },
  stateToken: 'mock-stateToken',
  linkParams: undefined,
  fromUri: 'mock-fromUri',
  backToSignInLink: 'mock-backToSignInLink',
  vendor: undefined,
  thirdPartyEnrollmentUrl: undefined,
  deviceEnrollment: undefined,
  usingDeviceFlow: false,
  idpDiscovery: undefined,
  consentCancelUrl: undefined,
  registrationEnabledForSignInWidget: false,
  overrideExistingStateToken: false,
  orgSyncToAccountChooserEnabled: false,
  isMfaAttestation: false,
  disableNewLoginPage: false,
  interstitialBeforeLoginRedirect: undefined,
  repost: false,
  accountChooserDiscoveryUrl: 'mock-accountChooserDiscoveryUrl',
  isMobileClientLogin: false,
  isMobileSSO: false,
  disableiPadCheck: false,
  enableiPadLoginReload: false,
  hasChromeOSFeature: false,
  showLinkToAppStore: false,
  enrollingFactor: false,
  showInactiveTabIfDocumentIsHidden: false,
  avoidPageRefresh: false,
  sdkBaseURL: 'mock-sdkBaseURL',
  expiresAt: 60 * 60 * 1000,
  refreshWindowMs: 60 * 60 * 1000,
  username: 'mock-username',
  rememberMe: false,
  smsRecovery: false,
  callRecovery: false,
  emailRecovery: false,
  suppliedRedirectUri: 'mock-suppliedRedirectUri',
  showX509button: false,
  pivCardButton: 'mock-pivCardButton',
  idpBasedPivCardButton: 'mock-idpBasedPivCardButton',
  certAuthUrl: 'mock-certAuthUrl',
  isCustomDomain: false,
  customDomain: 'mock-certAuthUrl',
  orgSupportPhoneNumber: 'mock-orgSupportPhoneNumber',
  hideSignOutForMFA: false,
  hideBackToSignInForReset: false,
  signOutUrl: 'mock-signOutUrl',
  hasPasswordlessPolicy: false,
  securityImage: false,
  selfServiceUnlock: false,
  redirectByFormSubmit: false,
  autoPush: false,
  orgName: 'mock-orgName',
  orgLogo: 'mock-orgLogo',
  enableDeviceFingerprinting: false,
  useFingerprintForSecImage: false,
  brandName: undefined,
  brandPrimaryColor: undefined,
  brandPrimaryColorContrast: undefined,
  brandSecondaryColor: undefined,
  brandSecondaryColorContrast: undefined,
  useSiwGen3: false,
  i18nTest: {},
  CNCountryValue: {},
  HKCountryValue: {},
  MOCountryValue: {},
  TWCountryValue: {},
  invalidTokenErrorMsg: 'mock-invalidTokenErrorMsg',
  countryIso: 'US',
};

export const databagString = JSON.stringify(databag);
