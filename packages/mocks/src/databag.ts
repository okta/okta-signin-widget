import type { Databag } from '@okta/loginpage-render';

export const databag: Databag = {
  // point to server
  baseUrl: 'http://localhost:3030',

  featureFlags: [],
  appProperties: {
    accountChooserDiscoveryUrl: 'mock-accountChooserDiscoveryUrl',
  },
  orgLoginPageSettings: {
    customLinkOneText: 'mock-customLinkOneText',
    customLinkOneHref: 'mock-customLinkOneHref',
    customLinkTwoText: 'mock-customLinkTwoText',
    customLinkTwoHref: 'mock-customLinkTwoHref',
    factorPageCustomLinkText: 'mock-factorPageCustomLinkText',
    factorPageCustomLinkHref: 'mock-factorPageCustomLinkHref',
    oktaHelpHref: 'mock-oktaHelpHref',
    forgottenPasswordHref: 'mock-forgottenPasswordHref',
    unlockAccountHref: 'mock-unlockAccountHref',
    showPasswordVisibilityToggle: false,
    showIdentifier: false,
    usernameLabel: 'mock-usernameLabel',
    usernameInlineLabel: 'mock-usernameInlineLabel',
    passwordLabel: 'mock-passwordLabel',
    passwordInlineLabel: 'mock-passwordInlineLabel',
    signinLabel: 'mock-signinLabel',
    forgottenPasswordLabel: 'mock-forgottenPasswordLabel',
    unlockAccountLabel: 'mock-unlockAccountLabel',
    oktaHelpLabel: 'mock-oktaHelpLabel',
    footerHelpTitle: 'mock-footerHelpTitle',
    recoveryFlowPlaceholder: 'mock-recoveryFlowPlaceholder',
  },
  orgctx: {
    org: {
      name: 'mock org name',
      rememberMeEnabled: false,
    }
  },
  orgOptionalUserAccountFields: {
    hideSecurityImage: false,
  },
  stateToken: 'mock-stateToken',
  linkParams: undefined,
  fromURI: 'mock-fromURI',
  backToSignInLink: 'mock-backToSignInLink',
  vendor: undefined,
  thirdPartyEnrollmentUrl: undefined,
  deviceEnrollment: undefined,
  usingDeviceFlow: false,
  idpDiscovery: undefined,
  consentCancelUrl: undefined,
  registrationEnabledForSignInWidget: false,
  overrideExistingStateToken: false,
  orgSyncToAccountChooserEnabled: false,
  isMfaAttestation: false,
  interstitialBeforeLoginRedirect: undefined,
  repost: false,
  accountChooserDiscoveryUrl: 'mock-accountChooserDiscoveryUrl',
  isMobileClientLogin: false,
  isMobileSSO: false,
  hasChromeOSFeature: false,
  showLinkToAppStore: false,
  enrollingFactor: false,
  showInactiveTabIfDocumentIsHidden: false,
  sdkBaseURL: 'mock-sdkBaseURL',
  expiresAt: 60 * 60 * 1000,
  refreshWindowMs: 60 * 60 * 1000,
  username: 'mock-username',
  smsSelfServiceEnabled: false,
  callSelfServiceEnabled: false,
  emailSelfServiceEnabled: false,
  suppliedRedirectUri: 'mock-suppliedRedirectUri',
  showX509button: false,
  pivCardButton: 'mock-pivCardButton',
  idpBasedPivCardButton: 'mock-idpBasedPivCardButton',
  certAuthUrl: 'mock-certAuthUrl',
  isCustomDomain: false,
  customDomain: 'mock-certAuthUrl',
  orgSupportPhoneNumber: 'mock-orgSupportPhoneNumber',
  hideSignOutLinkInMFA: false,
  hideBackToSignInForReset: false,
  signOutUrl: 'mock-signOutUrl',
  selfServiceUnlockEnabled: false,
  passwordlessAuth: false,
  redirectByFormSubmit: false,
  orgLogo: 'mock-orgLogo',
  useDeviceFingerprintForSecurityImage: false,
  brandName: undefined,
  brandPrimaryColor: undefined,
  brandPrimaryColorContrast: undefined,
  brandSecondaryColor: undefined,
  brandSecondaryColorContrast: undefined,
  useSiwGen3: false,
  i18nTest: {},
  countryIso: 'US',
  isSamlForceAuthnPrompt: false,
  refreshPageWhenPageBecomesActive: false,
  customSignOutUrl: 'mock-customSignOutUrl',
  isCookieCheckingKSEnabled: false,
  i18n: {
    idpBasedPivCardButton: 'mock-idpBasedPivCardButton',
    invalidTokenErrorMsg: 'mock-invalidTokenErrorMsg',
    pivCardButton: 'mock-pivCardButton',
    countryTranslationJabil: {
      CN: 'mock-countryCN',
      HK: 'mock-countryHK',
      MO: 'mock-countryMO',
      TW: 'mock-countryTW',
    },
  }
};

export const jspPageDatabag = {
  isMobileSSO: false,
  hasChromeOSFeature: false,
  showLinkToAppStore: false,
  showInactiveTabIfDocumentIsHidden: false,
  enableDeviceFingerprinting: false,
  isCookieCheckingKSEnabled: false,
  disableSiwPollDelay: false,
};

export const databagString = JSON.stringify(databag);
